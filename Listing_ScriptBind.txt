AI::Warning(IFunctionHandler *pH)
AI::Error(IFunctionHandler *pH)
AI::LogProgress(IFunctionHandler *pH)
AI::LogEvent(IFunctionHandler *pH)
AI::LogComment(IFunctionHandler *pH)
AI::RecComment(IFunctionHandler *pH)
AI::AddSmartObjectCondition(IFunctionHandler *pH)
AI::ExecuteAction(IFunctionHandler *pH)
AI::AbortAction(IFunctionHandler *pH)
AI::SetSmartObjectState(IFunctionHandler *pH)
AI::ModifySmartObjectStates(IFunctionHandler *pH)
AI::SmartObjectEvent(IFunctionHandler *pH)
AI::GetLastUsedSmartObject(IFunctionHandler *pH)
AI::ResetParameters(IFunctionHandler *pH)
AI::CreateGoalPipe(IFunctionHandler *pH)
AI::BeginGoalPipe(IFunctionHandler *pH)
AI::EndGoalPipe(IFunctionHandler *pH)
AI::BeginGroup(IFunctionHandler *pH)
AI::EndGroup(IFunctionHandler *pH)
AI::PushLabel(IFunctionHandler *pH)
AI::PushGoal(IFunctionHandler *pH)
AI::IsGoalPipe(IFunctionHandler *pH)
AI::Signal(IFunctionHandler * pH)
AI::NotifyGroup(IFunctionHandler * pH, int groupID, ScriptHandle sender, const char* notification)
AI::FreeSignal(IFunctionHandler * pH)
AI::SetIgnorant(IFunctionHandler * pH)
AI::BreakEvent(IFunctionHandler* pH, ScriptHandle entityID, Vec3 pos, float radius)
AI::AddCoverEntity(IFunctionHandler* pH, ScriptHandle entityID)
AI::RemoveCoverEntity(IFunctionHandler* pH, ScriptHandle entityID)
AI::SetAssesmentMultiplier(IFunctionHandler * pH)
AI::GetGroupCount(IFunctionHandler * pH)
AI::GetGroupMember(IFunctionHandler * pH)
AI::GetGroupTarget(IFunctionHandler * pH)
AI::GetGroupTargetType(IFunctionHandler *pH, int groupID)
AI::GetGroupTargetThreat(IFunctionHandler *pH, int groupID)
AI::GetGroupTargetEntity(IFunctionHandler *pH, int groupID)
AI::GetGroupScriptTable(IFunctionHandler *pH, int groupID)
AI::GetGroupTargetCount(IFunctionHandler * pH)
AI::FindObjectOfType(IFunctionHandler * pH)
AI::SoundEvent(IFunctionHandler *pH)
AI::VisualEvent(IFunctionHandler * pH)
AI::GetSoundPerceptionDescriptor(IFunctionHandler *pH)
AI::SetSoundPerceptionDescriptor(IFunctionHandler *pH)
AI::GetAnchor(IFunctionHandler * pH)
AI::GetFactionOf(IFunctionHandler* pH, ScriptHandle entityID)
AI::SetFactionOf(IFunctionHandler* pH, ScriptHandle entityID, const char* factionName)
AI::GetReactionOf(IFunctionHandler* pH)
AI::SetReactionOf(IFunctionHandler* pH, const char*factionOne, const char* factionTwo, int reaction)
AI::GetTypeOf(IFunctionHandler * pH)
AI::GetSubTypeOf(IFunctionHandler * pH)
AI::GetGroupOf(IFunctionHandler * pH)
AI::Hostile(IFunctionHandler * pH)
AI::SetRefPointPosition(IFunctionHandler * pH)
AI::SetRefPointDirection(IFunctionHandler * pH)
AI::SetRefPointRadius(IFunctionHandler * pH)
AI::GetRefPointPosition(IFunctionHandler * pH)
AI::GetRefPointDirection(IFunctionHandler * pH)
AI::GetFormationPointPosition(IFunctionHandler * pH)
AI::SetRefShapeName(IFunctionHandler * pH)
AI::GetRefShapeName(IFunctionHandler * pH)
AI::SetVehicleStickTarget(IFunctionHandler *pH)
AI::SetCharacter(IFunctionHandler * pH)
AI::SetForcedNavigation(IFunctionHandler * pH)
AI::SetAdjustPath(IFunctionHandler * pH)
AI::GetHeliAdvancePoint(IFunctionHandler * pH)
AI::GetFlyingVehicleFlockingPos(IFunctionHandler * pH)
AI::CheckVehicleColision(IFunctionHandler * pH)
AI::IntersectsForbidden(IFunctionHandler * pH)
AI::IsPointInFlightRegion(IFunctionHandler * pH)
AI::IsPointInWaterRegion(IFunctionHandler * pH)
AI::GetEnclosingSpace(IFunctionHandler * pH)
AI::GetAIObjectPosition(IFunctionHandler * pH)
AI::GetBeaconPosition(IFunctionHandler * pH)
AI::SetBeaconPosition(IFunctionHandler * pH)
AI::GetNearestEntitiesOfType(IFunctionHandler * pH)
AI::Event(IFunctionHandler * pH)
AI::GetAttentionTargetOf(IFunctionHandler * pH)
AI::GetAttentionTargetAIType(IFunctionHandler * pH)
AI::GetAttentionTargetType(IFunctionHandler * pH)
AI::GetAttentionTargetEntity(IFunctionHandler * pH, ScriptHandle entityID)
AI::GetAttentionTargetPosition(IFunctionHandler * pH)
AI::GetAttentionTargetDistance(IFunctionHandler * pH)
AI::GetAttentionTargetDirection(IFunctionHandler * pH)
AI::GetAttentionTargetViewDirection(IFunctionHandler * pH)
AI::GetAttentionTargetThreat(IFunctionHandler* pH, ScriptHandle entityID)
AI::GetPotentialTargetCountFromFaction(IFunctionHandler* pH, ScriptHandle entityID, const char* factionName)
AI::GetPotentialTargetCount(IFunctionHandler* pH, ScriptHandle entityID)
AI::CreateFormation(IFunctionHandler * pH)
AI::AddFormationPointFixed(IFunctionHandler * pH)
AI::AddFormationPoint(IFunctionHandler * pH)
AI::GetFormationPointClass(IFunctionHandler * pH)
AI::GetLeader(IFunctionHandler * pH)
AI::UpTargetPriority(IFunctionHandler * pH)
AI::DropTarget(IFunctionHandler * pH)
AI::ClearPotentialTargets(IFunctionHandler * pH)
AI::SetTempTargetPriority(IFunctionHandler *pH)
AI::AddAggressiveTarget(IFunctionHandler *pH)
AI::UpdateTempTarget(IFunctionHandler * pH)
AI::ClearTempTarget(IFunctionHandler * pH)
AI::SetExtraPriority(IFunctionHandler * pH)
AI::GetExtraPriority(IFunctionHandler * pH)
AI::RegisterTargetTrack(IFunctionHandler *pH)
AI::UnregisterTargetTrack(IFunctionHandler *pH)
AI::SetTargetTrackClassThreat(IFunctionHandler *pH)
AI::CreateStimulusEventInRange(IFunctionHandler *pH, ScriptHandle targetId, const char* stimulusName, SmartScriptTable dataScriptTable)
AI::SetUnitProperties(IFunctionHandler * pH)
AI::GetUnitCount(IFunctionHandler * pH)
AI::SetFactionThreatMultiplier(IFunctionHandler* pH)
AI::SetLeader(IFunctionHandler *pH)
AI::GetStance(IFunctionHandler *pH)
AI::SetStance(IFunctionHandler *pH)
AI::SetMovementContext(IFunctionHandler *pH	, ScriptHandle entityId, int context)
AI::ClearMovementContext(IFunctionHandler *pH, ScriptHandle entityId, int context)
AI::AssignPFPropertiesToPathType(IFunctionHandler *pH)
AI::AssignPathTypeToSOUser(IFunctionHandler *pH)
AI::SetPFProperties(IFunctionHandler *pH)
AI::GetTargetType(IFunctionHandler *pH)
AI::GetTargetSubType(IFunctionHandler * pH)
AI::ChangeFormation(IFunctionHandler *pH)
AI::ScaleFormation(IFunctionHandler *pH)
AI::SetFormationUpdate(IFunctionHandler *pH)
AI::SetPostures(IFunctionHandler *pH, ScriptHandle entityId, SmartScriptTable postures)
AI::SetPosturePriority(IFunctionHandler *pH, ScriptHandle entityId, const char* postureName, float priority)
AI::GetPosturePriority(IFunctionHandler *pH, ScriptHandle entityId, const char* postureName)
AI::ChangeParameter(IFunctionHandler * pH)
AI::GetParameter(IFunctionHandler * pH)
AI::ChangeMovementAbility(IFunctionHandler * pH)
AI::GetForwardDir(IFunctionHandler * pH)
AI::GetNavigationType(IFunctionHandler * pH)
AI::GetNearestHidespot(IFunctionHandler * pH)
AI::GetDirectAnchorPos(IFunctionHandler * pH)
AI::InvalidateHidespot(IFunctionHandler *pH)
AI::EvalHidespot(IFunctionHandler * pH)
AI::EvalPeek(IFunctionHandler * pH)
AI::AddPersonallyHostile(IFunctionHandler* pH, ScriptHandle entityID, ScriptHandle hostileID)
AI::RemovePersonallyHostile(IFunctionHandler* pH, ScriptHandle entityID, ScriptHandle hostileID)
AI::ResetPersonallyHostiles(IFunctionHandler* pH, ScriptHandle entityID, ScriptHandle hostileID)
AI::IsPersonallyHostile(IFunctionHandler* pH, ScriptHandle entityID, ScriptHandle hostileID)
AI::NotifyReinfDone(IFunctionHandler * pH)
AI::BehaviorEvent(IFunctionHandler* pH)
AI::GetGroupAveragePosition(IFunctionHandler *pH)
AI::SetPFBlockerRadius(IFunctionHandler *pH)
AI::SetFireMode(IFunctionHandler *pH)
AI::SetMemoryFireType(IFunctionHandler *pH)
AI::GetMemoryFireType(IFunctionHandler *pH)
AI::ThrowGrenade(IFunctionHandler *pH)
AI::SetRefPointToGrenadeAvoidTarget(IFunctionHandler *pH)
AI::IsAgentInTargetFOV(IFunctionHandler *pH)
AI::AgentLookAtPos(IFunctionHandler *pH)
AI::ResetAgentLookAtPos(IFunctionHandler *pH)
AI::IsAgentInAgentFOV(IFunctionHandler *pH)
AI::CreateGroupFormation(IFunctionHandler *pH)
AI::SetFormationPosition(IFunctionHandler *pH)
AI::SetFormationLookingPoint(IFunctionHandler *pH)
AI::SetFormationAngleThreshold(IFunctionHandler *pH)
AI::GetFormationPosition(IFunctionHandler *pH)
AI::GetFormationLookingPoint(IFunctionHandler *pH)
AI::AddCombatClass(IFunctionHandler *pH)
AI::SetRefPointAtDefensePos(IFunctionHandler *pH)
AI::SetFormationUpdateSight(IFunctionHandler *pH)
AI::SetPathToFollow(IFunctionHandler *pH)
AI::SetPathAttributeToFollow(IFunctionHandler *pH)
AI::GetTotalLengthOfPath(IFunctionHandler *pH)
AI::GetNearestPointOnPath(IFunctionHandler *pH)
AI::GetPathSegNoOnPath(IFunctionHandler *pH)
AI::GetPointOnPathBySegNo(IFunctionHandler *pH)
AI::GetPathLoop(IFunctionHandler *pH)
AI::SetPointListToFollow(IFunctionHandler *pH)
AI::GetNearestPathOfTypeInRange(IFunctionHandler *pH)
AI::GetAlertness(IFunctionHandler * pH)
AI::GetGroupAlertness(IFunctionHandler * pH)
AI::RegisterDamageRegion(IFunctionHandler *pH)
AI::GetDistanceAlongPath(IFunctionHandler *pH)
AI::IgnoreCurrentHideObject(IFunctionHandler *pH)
AI::GetCurrentHideAnchor(IFunctionHandler *pH)
AI::FindStandbySpotInShape(IFunctionHandler *pH)
AI::FindStandbySpotInSphere(IFunctionHandler *pH)
AI::GetProbableTargetPosition(IFunctionHandler * pH)
AI::GetObjectRadius(IFunctionHandler * pH)
AI::GetEnclosingGenericShapeOfType(IFunctionHandler * pH)
AI::IsPointInsideGenericShape(IFunctionHandler * pH)
AI::DistanceToGenericShape(IFunctionHandler * pH)
AI::ConstrainPointInsideGenericShape(IFunctionHandler * pH)
AI::CreateTempGenericShapeBox(IFunctionHandler * pH)
AI::SetTerritoryShapeName(IFunctionHandler * pH)
AI::NotifySurpriseEntityAction(IFunctionHandler * pH)
AI::DebugReportHitDamage(IFunctionHandler * pH)
AI::CanMelee(IFunctionHandler * pH)
AI::IsMoving(IFunctionHandler * pH)
AI::IsEnabled(IFunctionHandler * pH)
AI::EnableCoverFire(IFunctionHandler * pH)
AI::EnableFire(IFunctionHandler * pH)
AI::IsFireEnabled(IFunctionHandler * pH)
AI::CanFireInStance(IFunctionHandler * pH)
AI::SetUseSecondaryVehicleWeapon(IFunctionHandler *pH)
AI::Animation(IFunctionHandler * pH)
AI::ProcessBalancedDamage(IFunctionHandler *pH)
AI::SetRefpointToAnchor(IFunctionHandler * pH)
AI::SetRefpointToPunchableObject(IFunctionHandler * pH)
AI::MeleePunchableObject(IFunctionHandler *pH)
AI::IsPunchableObjectValid(IFunctionHandler *pH)
AI::GetDirLabelToPoint(IFunctionHandler * pH)
AI::GetPredictedPosAlongPath(IFunctionHandler * pH)
AI::GetBiasedDirection(IFunctionHandler* pH)
AI::SetAttentiontarget(IFunctionHandler* pH)
AI::RegisterInterestingEntity(IFunctionHandler* pH, ScriptHandle entityId, float radius, float baseInterest, const char* aiAction, Vec3 offset, float pause, int shared)
AI::UnregisterInterestingEntity(IFunctionHandler* pH, ScriptHandle entityId)
AI::RegisterInterestedActor(IFunctionHandler* pH, ScriptHandle entityId, float fInterestFilter, float fAngleInDegrees)
AI::UnregisterInterestedActor(IFunctionHandler* pH, ScriptHandle entityId)
AI::CanMoveStraightToPoint(IFunctionHandler *pH)
AI::IsTakingCover(IFunctionHandler *pH)
AI::IsMovingToCover(IFunctionHandler *pH)
AI::IsMovingInCover(IFunctionHandler *pH)
AI::IsCoverCompromised(IFunctionHandler *pH)
AI::SetCoverCompromised(IFunctionHandler* pH)
AI::IsInCover(IFunctionHandler* pH)
AI::SetInCover(IFunctionHandler* pH)
AI::StopCommunication(IFunctionHandler* pH, ScriptHandle playID)
AI::IsOutOfAmmo(IFunctionHandler *pH)
AI::IsLowOnAmmo(IFunctionHandler *pH)
AI::EnableWeaponAccessory(IFunctionHandler *pH)
AI::ResetAgentState(IFunctionHandler *pH, ScriptHandle entityId, const char * stateLabel)
AI::RegisterTacticalPointQuery(IFunctionHandler *pH)
AI::AutoDisable(IFunctionHandler *pH)
AI::CheckMeleeDamage(IFunctionHandler *pH)
AI::GetTacticalPoints(IFunctionHandler *pH)
AI::DestroyAllTPSQueries( IFunctionHandler* pH )
AI::CreateQueryFromTacticalSpec( SmartScriptTable specTable )
AI::GetObjectBlackBoard(IFunctionHandler *pH)
AI::GetBehaviorBlackBoard(IFunctionHandler *pH)
AI::SetBehaviorVariable(IFunctionHandler *pH, ScriptHandle entityId, const char* variableName, bool value)
AI::GetBehaviorVariable(IFunctionHandler *pH, ScriptHandle entityId, const char* variableName)
AI::GoTo(IFunctionHandler* pH)
AI::SetSpeed(IFunctionHandler* pH)
AI::SetEntitySpeedRange(IFunctionHandler *pH)
AI::SetAlarmed(IFunctionHandler *pH)
AI::LoadBehaviors(IFunctionHandler *pH, const char *folderName, const char* extension)
AI::LoadCharacters(IFunctionHandler *pH, const char *folderName, SmartScriptTable tbl)
AI::IsLowHealthPauseActive(IFunctionHandler* pH, ScriptHandle entityID)
AI::GetPreviousBehaviorName(IFunctionHandler* pH, ScriptHandle entityID)
AI::GetPeakThreatLevel(IFunctionHandler* pH, ScriptHandle entityID)
AI::GetPeakThreatType(IFunctionHandler* pH, ScriptHandle entityID)
AI::GetPreviousPeakThreatLevel(IFunctionHandler* pH, ScriptHandle entityID)
AI::GetPreviousPeakThreatType(IFunctionHandler* pH, ScriptHandle entityID)
AI::SetContinuousMotion(IFunctionHandler* pH, ScriptHandle entityID, bool continuousMotion)
AI::LoadGoalPipes(IFunctionHandler* pH)
AI::CheckForFriendlyAgentsAroundPoint(IFunctionHandler* pH, ScriptHandle entityID, Vec3 point, float radius)
AI::EnableUpdateLookTarget(IFunctionHandler* pH, ScriptHandle entityID, bool bEnable)
AI::SetBehaviorTreeEvaluationEnabled(IFunctionHandler* pH, ScriptHandle entityID, bool enabled)
AI::UpdateGlobalPerceptionScale(IFunctionHandler* pH, float visualScale, float audioScale)
AI::QueueBubbleMessage(IFunctionHandler* pH, ScriptHandle entityID, const char* message)
AI::SequenceBehaviorReady( IFunctionHandler* pH, ScriptHandle entityId )
AI::SequenceInterruptibleBehaviorLeft( IFunctionHandler* pH, ScriptHandle entityId )
AI::SequenceNonInterruptibleBehaviorLeft( IFunctionHandler* pH, ScriptHandle entityId )
AI::SetCollisionAvoidanceRadiusIncrement( IFunctionHandler* pH, ScriptHandle entityId, float radius )
AI::RequestToStopMovement(IFunctionHandler* pH, ScriptHandle entityID)
AI::GetDistanceToClosestGroupMember(IFunctionHandler* pH, ScriptHandle entityIdHandle)
AI::IsAimReady(IFunctionHandler* pH, ScriptHandle entityIdHandle)
AI::AllowLowerBodyToTurn(IFunctionHandler* pH, ScriptHandle entityID, bool bAllowLowerBodyToTurn)
AI::GetGroupScopeUserCount(IFunctionHandler* pH, ScriptHandle entityIdHandle, const char* groupScopeName)
AI::StartModularBehaviorTree(IFunctionHandler* pH, ScriptHandle entityIdHandle, const char* treeName)
AI::StopModularBehaviorTree(IFunctionHandler* pH, ScriptHandle entityIdHandle)
AI::SetLastOpResult(IFunctionHandler* pH, ScriptHandle entityIdHandle, ScriptHandle targetEntityIdHandle)
ActionMapManager::EnableActionFilter(IFunctionHandler *pH, const char *name, bool enable)
ActionMapManager::EnableActionMap(IFunctionHandler *pH, const char *name, bool enable)
ActionMapManager::EnableActionMapManager(IFunctionHandler *pH, bool enable, bool resetStateOnDisable)
ActionMapManager::LoadFromXML(IFunctionHandler *pH, const char *name)
ActionMapManager::InitActionMaps(IFunctionHandler *pH, const char* path)
ActionMapManager::SetDefaultActionEntity(IFunctionHandler *pH, EntityId id, bool updateAll)
ActionMapManager::GetDefaultActionEntity(IFunctionHandler *pH)
ActionMapManager::LoadControllerLayoutFile(IFunctionHandler *pH, const char* layoutName)
ActionMapManager::IsFilterEnabled(IFunctionHandler *pH, const char* filterName)
ActorSystem::CreateActor( IFunctionHandler *pH, int channelId, SmartScriptTable actorParams )
DialogSystem::CreateSession(IFunctionHandler* pH, const char* scriptID)
DialogSystem::DeleteSession(IFunctionHandler* pH, int sessionID)
DialogSystem::SetActor(IFunctionHandler* pH, int sessionID, int actorID, ScriptHandle entity)
DialogSystem::Play(IFunctionHandler* pH, int sessionID)
DialogSystem::Stop(IFunctionHandler* pH, int sessionID)
DialogSystem::IsEntityInDialog(IFunctionHandler* pH, ScriptHandle entity)
UIAction::ReloadElement( IFunctionHandler *pH, const char * elementName, int instanceID )
UIAction::UnloadElement( IFunctionHandler *pH, const char * elementName, int instanceID )
UIAction::ShowElement( IFunctionHandler *pH, const char * elementName, int instanceID )
UIAction::HideElement( IFunctionHandler *pH, const char * elementName, int instanceID )
UIAction::RequestHide( IFunctionHandler *pH, const char * elementName, int instanceID )
UIAction::CallFunction( IFunctionHandler *pH, const char * elementName, int instanceID, const char* functionName )
UIAction::SetVariable( IFunctionHandler *pH, const char * elementName, int instanceID, const char* varName )
UIAction::GetVariable( IFunctionHandler *pH, const char * elementName, int instanceID, const char* varName )
UIAction::SetArray( IFunctionHandler *pH, const char * elementName, int instanceID, const char* arrayName, SmartScriptTable values )
UIAction::GetArray( IFunctionHandler *pH, const char * elementName, int instanceID, const char* arrayName )
UIAction::GotoAndPlay( IFunctionHandler *pH, const char * elementName, int instanceID, const char * mcName, int frameNum )
UIAction::GotoAndStop( IFunctionHandler *pH, const char * elementName, int instanceID, const char * mcName, int frameNum )
UIAction::GotoAndPlayFrameName( IFunctionHandler *pH, const char * elementName, int instanceID, const char * mcName, const char * frameName )
UIAction::GotoAndStopFrameName( IFunctionHandler *pH, const char * elementName, int instanceID, const char * mcName, const char * frameName )
UIAction::SetAlpha( IFunctionHandler *pH, const char * elementName, int instanceID, const char * mcName, float fAlpha )
UIAction::GetAlpha( IFunctionHandler *pH, const char * elementName, int instanceID, const char * mcName )
UIAction::SetVisible( IFunctionHandler *pH, const char * elementName, int instanceID, const char * mcName, bool bVisible )
UIAction::IsVisible( IFunctionHandler *pH, const char * elementName, int instanceID, const char * mcName )
UIAction::SetPos( IFunctionHandler *pH, const char * elementName, int instanceID, const char * mcName, Vec3 vPos )
UIAction::GetPos( IFunctionHandler *pH, const char * elementName, int instanceID, const char * mcName )
UIAction::GetScreenPosFromWorld(IFunctionHandler *pH, const char * elementName, int instanceID, Vec3 pos /*in/out*/, Vec3 offset /*in/out*/, bool bScaleMode)
UIAction::SetRotation( IFunctionHandler *pH, const char * elementName, int instanceID, const char * mcName, Vec3 vRotation )
UIAction::GetRotation( IFunctionHandler *pH, const char * elementName, int instanceID, const char * mcName )
UIAction::SetScale( IFunctionHandler *pH, const char * elementName, int instanceID, const char * mcName, Vec3 vScale )
UIAction::GetScale( IFunctionHandler *pH, const char * elementName, int instanceID, const char * mcName )
UIAction::StartAction( IFunctionHandler *pH, const char * actionName, SmartScriptTable arguments )
UIAction::EndAction( IFunctionHandler *pH, SmartScriptTable pTable, bool disable, SmartScriptTable arguments )
UIAction::EnableAction( IFunctionHandler *pH, const char * actionName )
UIAction::DisableAction( IFunctionHandler *pH, const char * actionName )
UIAction::RegisterElementListener( IFunctionHandler *pH, SmartScriptTable pTable, const char* elementName, int instanceID, const char* eventName, const char* callback )
UIAction::RegisterActionListener( IFunctionHandler *pH, SmartScriptTable pTable, const char* actionName, const char* eventName, const char* callback )
UIAction::RegisterEventSystemListener( IFunctionHandler *pH, SmartScriptTable pTable, const char* eventSystem, const char* eventName, const char* callback )
UIAction::UnregisterElementListener( IFunctionHandler *pH, SmartScriptTable pTable, const char* callback )
UIAction::UnregisterActionListener( IFunctionHandler *pH, SmartScriptTable pTable, const char* callback )
UIAction::UnregisterEventSystemListener( IFunctionHandler *pH, SmartScriptTable pTable, const char* callback )
GameToken::SetToken( IFunctionHandler *pH)
GameToken::GetToken( IFunctionHandler *pH,const char *sTokenName )
GameToken::DumpAllTokens( IFunctionHandler* pH)
Inventory::Destroy(IFunctionHandler *pH)
Inventory::Clear(IFunctionHandler *pH)
Inventory::Dump(IFunctionHandler *pH)
Inventory::GetItemByClass(IFunctionHandler *pH, const char *className)
Inventory::GetGrenadeWeaponByClass(IFunctionHandler *pH, const char *className)
Inventory::HasAccessory(IFunctionHandler *pH, const char *accessoryName)
Inventory::GetCurrentItemId(IFunctionHandler *pH)
Inventory::GetCurrentItem(IFunctionHandler *pH)
ItemSystem::Reset(IFunctionHandler *pH)
ItemSystem::GiveItem(IFunctionHandler *pH, ScriptHandle actorId, const char *itemName)
ItemSystem::SetActorItem(IFunctionHandler *pH, ScriptHandle actorId, ScriptHandle itemId, bool keepHistory)
ItemSystem::SetActorItemByName(IFunctionHandler *pH, ScriptHandle actorId, const char *name, bool keepHistory)
ItemSystem::GiveItemPack(IFunctionHandler *pH, ScriptHandle actorId, const char *packName)
ItemSystem::GetPackPrimaryItem(IFunctionHandler *pH, const char *packName)
ItemSystem::GetPackNumItems(IFunctionHandler *pH, const char *packName)
ItemSystem::GetPackItemByIndex(IFunctionHandler *pH, const char *packName, int index)
ItemSystem::SerializePlayerLTLInfo(IFunctionHandler *pH, bool reading)
MaterialEffects::GetEffectId(IFunctionHandler* pH, const char* customName, int surfaceIndex2)
MaterialEffects::GetEffectIdByLibName(IFunctionHandler* pH,  const char* LibName, const char* FGFXName)
MaterialEffects::PrintEffectIdByMatIndex(IFunctionHandler* pH,  int materialIndex1, int materialIndex2)
MaterialEffects::ExecuteEffect(IFunctionHandler* pH, int effectId, SmartScriptTable paramsTable)
Network::Expose( IFunctionHandler * pFH )
Network::DelegateAuthority( IFunctionHandler * pFH, ScriptHandle ent, int channel )
GameStatistics::PushGameScope(IFunctionHandler *pH, int scopeID)
GameStatistics::PopGameScope(IFunctionHandler *pH)
GameStatistics::CurrentScope(IFunctionHandler *pH)
GameStatistics::AddGameElement(IFunctionHandler *pH)
GameStatistics::RemoveGameElement(IFunctionHandler *pH)
GameStatistics::Event(IFunctionHandler* pH)
GameStatistics::StateValue(IFunctionHandler* pH)
Vehicle::Reset( IFunctionHandler *pH )
Vehicle::IsInsideRadius(IFunctionHandler *pH, Vec3 pos, float radius)
Vehicle::MultiplyWithWorldTM(IFunctionHandler *pH, Vec3 pos)
Vehicle::AddSeat(IFunctionHandler* pH, SmartScriptTable paramsTable)
Vehicle::HasHelper(IFunctionHandler* pH, const char* name)
Vehicle::GetHelperPos(IFunctionHandler* pH, const char* name, bool isInVehicleSpace)
Vehicle::GetHelperDir(IFunctionHandler* pH, const char* name, bool isInVehicleSpace)
Vehicle::GetHelperWorldPos(IFunctionHandler* pH, const char* name)
Vehicle::EnableMovement(IFunctionHandler *pH, bool enable)
Vehicle::DisableEngine(IFunctionHandler *pH, bool disable)
Vehicle::OnHit(IFunctionHandler* pH, ScriptHandle targetId, ScriptHandle shooterId, float damage, Vec3 position, float radius, int hitTypeId, bool explosion)
Vehicle::ProcessPassengerDamage(IFunctionHandler* pH, ScriptHandle passengerHandle, float actorHealth, float damage, int hitTypeId, bool explosion)
Vehicle::IsUsable(IFunctionHandler* pH, ScriptHandle userHandle)
Vehicle::OnUsed(IFunctionHandler* pH, ScriptHandle userHandle, int index, int action)
Vehicle::EnterVehicle(IFunctionHandler* pH, ScriptHandle actorHandle, int seatId, bool isAnimationEnabled)
Vehicle::ChangeSeat(IFunctionHandler* pH, ScriptHandle actorHandle, int seatId, bool isAnimationEnabled)
Vehicle::ExitVehicle(IFunctionHandler* pH, ScriptHandle actorHandle)
Vehicle::GetComponentDamageRatio(IFunctionHandler* pH, const char* pComponentName)
Vehicle::SetHealth(IFunctionHandler* pH, float fHealth)
Vehicle::ReadOrRestoreJSON(IFunctionHandler* pH, bool restore, const char* json)
Vehicle::OnSpawnComplete(IFunctionHandler* pH)
Vehicle::Destroy(IFunctionHandler* pH)
Vehicle::IsDestroyed(IFunctionHandler* pH)
Vehicle::GetSeatForPassenger(IFunctionHandler* pH, ScriptHandle passengerId)
VehicleSeat::Reset(IFunctionHandler *pH)
VehicleSeat::GetWeaponId(IFunctionHandler* pH, int weaponIndex)
VehicleSeat::GetWeaponCount(IFunctionHandler* pH)
VehicleSeat::SetAIWeapon(IFunctionHandler* pH, ScriptHandle weaponHandle)
VehicleSeat::IsFree(IFunctionHandler* pH, ScriptHandle actorHandle)
VehicleSeat::IsDriver(IFunctionHandler* pH)
VehicleSeat::IsGunner(IFunctionHandler* pH)
VehicleSeat::GetPassengerId(IFunctionHandler* pH)
VehicleSystem::GetVehicleImplementations(IFunctionHandler* pH)
VehicleSystem::GetOptionalScript(IFunctionHandler *pH, char* vehicleName)
VehicleSystem::ReloadSystem(IFunctionHandler *pH)
Action::LoadXML( IFunctionHandler *pH, const char * definitionFile, const char * dataFile )
Action::SaveXML( IFunctionHandler *pH, const char * definitionFile, const char * dataFile, SmartScriptTable dataTable )
Action::IsGameStarted( IFunctionHandler * pH )
Action::IsRMIServer( IFunctionHandler * pH )
Action::IsImmersivenessEnabled( IFunctionHandler * pH )
Action::IsChannelSpecial( IFunctionHandler * pH )
Action::IsClient(IFunctionHandler *pH)
Action::IsServer(IFunctionHandler *pH)
Action::IsDedicatedServer(IFunctionHandler *pH)
Action::GetPlayerList( IFunctionHandler *pH )
Action::IsGameObjectProbablyVisible( IFunctionHandler *pH, ScriptHandle gameObject )
Action::ActivateEffect( IFunctionHandler *pH, const char * name)
Action::GetWaterInfo(IFunctionHandler *pH, Vec3 pos)
Action::GetServer( IFunctionHandler *pFH, int number )
Action::RefreshPings(IFunctionHandler *pFH )
Action::ConnectToServer( IFunctionHandler *pFH, char* server )
Action::GetServerTime( IFunctionHandler *pFH )
Action::ForceGameObjectUpdate( IFunctionHandler *pH, ScriptHandle entityId, bool force )
Action::CreateGameObjectForEntity( IFunctionHandler *pH, ScriptHandle entityId )
Action::BindGameObjectToNetwork(  IFunctionHandler *pH, ScriptHandle entityId )
Action::ActivateExtensionForGameObject( IFunctionHandler *pH, ScriptHandle entityId, const char *extension, bool activate )
Action::SetNetworkParent( IFunctionHandler *pH, ScriptHandle entityId, ScriptHandle parentId )
Action::IsChannelOnHold(IFunctionHandler *pH, int channelId )
Action::BanPlayer( IFunctionHandler *pH, ScriptHandle entityId, const char* message )
Action::PauseGame( IFunctionHandler *pH, bool pause )
Action::SetViewCamera(IFunctionHandler *pH)
Action::ResetToNormalCamera(IFunctionHandler *pH)
Action::PersistantSphere(IFunctionHandler* pH, Vec3 pos, float radius, Vec3 color, const char* name, float timeout)
Action::PersistantLine(IFunctionHandler* pH, Vec3 start, Vec3 end, Vec3 color, const char* name, float timeout)
Action::PersistantArrow(IFunctionHandler* pH, Vec3 pos, float radius, Vec3 dir, Vec3 color, const char* name, float timeout)
Action::Persistant2DText(IFunctionHandler* pH, const char* text, float size, Vec3 color, const char* name, float timeout)
Action::PersistantEntityTag(IFunctionHandler* pH, ScriptHandle entityId, const char *text)
Action::ClearEntityTags(IFunctionHandler* pH, ScriptHandle entityId)
Action::ClearStaticTag(IFunctionHandler* pH, ScriptHandle entityId, const char *staticId)
Action::EnableSignalTimer(IFunctionHandler* pH, ScriptHandle entityId, const char *sText)
Action::DisableSignalTimer(IFunctionHandler* pH, ScriptHandle entityId, const char *sText)
Action::SetSignalTimerRate(IFunctionHandler* pH, ScriptHandle entityId, const char *sText, float fRateMin, float fRateMax)
Action::ResetSignalTimer(IFunctionHandler* pH, ScriptHandle entityId, const char *sText)
Action::SendGameplayEvent(IFunctionHandler* pH, ScriptHandle entityId, int event)
Action::CacheItemSound(IFunctionHandler* pH, const char *itemName)
Action::CacheItemGeometry(IFunctionHandler* pH, const char *itemName)
Action::EnableRangeSignaling(IFunctionHandler* pH, ScriptHandle entityId, bool bEnable)
Action::DestroyRangeSignaling(IFunctionHandler* pH, ScriptHandle entityId)
Action::ResetRangeSignaling(IFunctionHandler* pH, ScriptHandle entityId)
Action::AddRangeSignal(IFunctionHandler* pH, ScriptHandle entityId, float fRadius, float fFlexibleBoundary, const char *sSignal)
Action::AddTargetRangeSignal(IFunctionHandler* pH, ScriptHandle entityId, ScriptHandle targetId, float fRadius, float fFlexibleBoundary, const char *sSignal)
Action::AddAngleSignal(IFunctionHandler* pH, ScriptHandle entityId, float fAngle, float fFlexibleBoundary, const char *sSignal)
Action::DontSyncPhysics(IFunctionHandler* pH, ScriptHandle entityId)
Action::RegisterWithAI(IFunctionHandler *pH)
Action::HasAI(IFunctionHandler* pH, ScriptHandle entityId)
Action::GetClassName(IFunctionHandler* pH, int classId)
Action::SetAimQueryMode(IFunctionHandler* pH, ScriptHandle entityId, int mode)
Action::PreLoadADB(IFunctionHandler* pH, const char* adbFileName)
Entity::DeleteThis( IFunctionHandler *pH )
Entity::SetPos(IFunctionHandler *pH,Vec3 vPos)
Entity::SetWorldPos(IFunctionHandler *pH,Vec3 vPos)
Entity::GetWorldPos(IFunctionHandler *pH)
Entity::GetWorldDir(IFunctionHandler *pH)
Entity::GetPos(IFunctionHandler *pH)
Entity::GetCenterOfMassPos(IFunctionHandler *pH)
Entity::GetWorldBoundsCenter(IFunctionHandler *pH)
Entity::SetAngles(IFunctionHandler *pH,Ang3 vAngles)
Entity::SetWorldAngles(IFunctionHandler *pH,Ang3 vAngles)
Entity::GetAngles(IFunctionHandler *pH)
Entity::GetWorldAngles(IFunctionHandler *pH)
Entity::SetScale(IFunctionHandler *pH, float fScale )
Entity::SetWorldScale(IFunctionHandler *pH, float fScale )
Entity::SetWorldScaleV(IFunctionHandler *pH, Vec3 vScale)
Entity::GetScale(IFunctionHandler *pH)
Entity::GetWorldScale(IFunctionHandler *pH)
Entity::GetBoneLocal(IFunctionHandler *pH, const char *boneName, Vec3 trgDir)
Entity::CalcWorldAnglesFromRelativeDir(IFunctionHandler *pH, Vec3 dir)
Entity::IsEntityInside(IFunctionHandler *pH, ScriptHandle entityId)
Entity::SetLocalPos(IFunctionHandler *pH,Vec3 vPos)
Entity::GetLocalPos(IFunctionHandler *pH)
Entity::SetLocalAngles(IFunctionHandler *pH,Ang3 vAngles)
Entity::GetLocalAngles(IFunctionHandler *pH)
Entity::SetLocalScale(IFunctionHandler *pH, float fScale )
Entity::GetLocalScale(IFunctionHandler *pH)
Entity::SetAIName(IFunctionHandler *pH)
Entity::SetName(IFunctionHandler *pH)
Entity::GetAIName(IFunctionHandler *pH)
Entity::SetFlags(IFunctionHandler *pH, int flags, int mode)
Entity::GetFlags(IFunctionHandler *pH)
Entity::HasFlags(IFunctionHandler *pH, int flags)
Entity::SetFlagsExtended(IFunctionHandler *pH, int flags, int mode)
Entity::GetFlagsExtended(IFunctionHandler *pH)
Entity::HasFlagsExtended(IFunctionHandler *pH, int flags)
Entity::GetName(IFunctionHandler *pH)
Entity::GetRawId(IFunctionHandler *pH)
Entity::GetArchetype(IFunctionHandler *pH)
Entity::CreateRenderProxy(IFunctionHandler *pH)
Entity::CheckShaderParamCallbacks(IFunctionHandler *pH)
Entity::LoadCharacter( IFunctionHandler *pH,int nSlot,const char *sFilename )
Entity::LoadGeomCache( IFunctionHandler *pH,int nSlot,const char *sFilename )
Entity::LoadObject( IFunctionHandler *pH,int nSlot,const char *sFilename )
Entity::LoadObjectWithFlags( IFunctionHandler *pH,int nSlot,const char *sFilename, const int loadFlags)
Entity::LoadObjectLattice( IFunctionHandler *pH,int nSlot )
Entity::LoadSubObject( IFunctionHandler *pH,int nSlot,const char *sFilename,const char *sGeomName )
Entity::LoadLight(IFunctionHandler *pH,int nSlot,SmartScriptTable table)
Entity::UpdateLightClipBounds(IFunctionHandler *pH, int nSlot)
Entity::SetLightColorParams( IFunctionHandler *pH, int nSlot, Vec3 color, float specular_multiplier)
Entity::SetSelfAsLightCasterException(IFunctionHandler *pH, int nLightSlot)
Entity::LoadCloud( IFunctionHandler *pH,int nSlot,const char *sFilename )
Entity::SetCloudMovementProperties(IFunctionHandler *pH, int nSlot, SmartScriptTable table)
Entity::LoadFogVolume( IFunctionHandler* pH, int nSlot, SmartScriptTable table )
Entity::FadeGlobalDensity(IFunctionHandler *pH, int nSlot, float fadeTime, float newGlobalDensity)
Entity::LoadVolumeObject(IFunctionHandler *pH, int nSlot, const char* sFilename)
Entity::SetVolumeObjectMovementProperties(IFunctionHandler *pH, int nSlot, SmartScriptTable table)
Entity::LoadPrismObject(IFunctionHandler *pH, int nSlot)
Entity::LoadParticleEffect(IFunctionHandler *pH,int nSlot, const char *sEffectName, SmartScriptTable table )
Entity::PreLoadParticleEffect(IFunctionHandler *pH, const char *sEffectName )
Entity::IsSlotParticleEmitter(IFunctionHandler *pH, int slot)
Entity::IsSlotLight(IFunctionHandler *pH, int slot)
Entity::IsSlotGeometry(IFunctionHandler *pH, int slot)
Entity::IsSlotCharacter(IFunctionHandler *pH, int slot)
Entity::SetParentSlot(IFunctionHandler * pH, int child, int parent)
Entity::GetParentSlot(IFunctionHandler* pH, int child)
Entity::GetSlotCount(IFunctionHandler* pH)
Entity::GetSlotPos(IFunctionHandler *pH, int nSlot)
Entity::SetSlotPos(IFunctionHandler *pH, int nSlot,Vec3 vPos)
Entity::SetSlotPosAndDir(IFunctionHandler *pH, int nSlot, Vec3 pos, Vec3 dir)
Entity::GetSlotAngles(IFunctionHandler *pH, int nSlot)
Entity::SetSlotAngles(IFunctionHandler *pH, int nSlot,Ang3 vAngles)
Entity::SetSlotAnglesDeg(IFunctionHandler *pH, int nSlot,Vec3 vAnglesDeg)
Entity::GetSlotScale(IFunctionHandler *pH, int nSlot)
Entity::CopySlotTM(IFunctionHandler *pH, int destSlot, int srcSlot, bool includeTranslation)
Entity::MultiplyWithSlotTM(IFunctionHandler *pH, int slot, Vec3 pos)
Entity::SetSlotWorldTM(IFunctionHandler *pH, int nSlot, Vec3 pos, Vec3 dir)
Entity::GetSlotWorldPos(IFunctionHandler *pH, int nSlot)
Entity::GetSlotWorldDir(IFunctionHandler *pH, int nSlot)
Entity::SetSlotHud3D(IFunctionHandler *pH, int nSlot)
Entity::GetCharacter(IFunctionHandler *pH, int nSlot)
Entity::SetSlotScale(IFunctionHandler *pH, int nSlot,float fScale)
Entity::IsSlotValid(IFunctionHandler *pH, int nSlot)
Entity::DrawSlot(IFunctionHandler *pH,int nSlot,int nEnable)
Entity::IgnorePhysicsUpdatesOnSlot(IFunctionHandler *pH, int nSlot)
Entity::FreeSlot(IFunctionHandler *pH,int nSlot)
Entity::FreeAllSlots(IFunctionHandler *pH)
Entity::DestroyPhysics(IFunctionHandler *pH)
Entity::EnablePhysics(IFunctionHandler *pH,bool bEnable)
Entity::Physicalize(IFunctionHandler *pH,int nSlot,int nPhysicsType, SmartScriptTable physicsParams)
Entity::ReattachSoftEntityVtx(IFunctionHandler *pH, ScriptHandle entityId, int partId)
Entity::PhysicalizeSlot(IFunctionHandler *pH, int slot, SmartScriptTable physicsParams)
Entity::UpdateSlotPhysics(IFunctionHandler *pH, int slot)
Entity::GetDirectionVector(IFunctionHandler *pH)
Entity::SetDirectionVector(IFunctionHandler *pH, Vec3 dir)
Entity::CreateBoneAttachment(IFunctionHandler *pH, int characterSlot, const char *boneName, const char *attachmentName)
Entity::CreateSkinAttachment(IFunctionHandler *pH, int characterSlot, const char *attachmentName)
Entity::DestroyAttachment(IFunctionHandler *pH, int characterSlot, const char *attachmentName)
Entity::GetAttachmentBone(IFunctionHandler *pH, int characterSlot, const char *attachmentName)
Entity::GetAttachmentCGF(IFunctionHandler *pH, int characterSlot, const char *attachmentName)
Entity::ResetAttachment(IFunctionHandler *pH, int characterSlot, const char *attachmentName)
Entity::SetAttachmentEffect(IFunctionHandler *pH, int characterSlot, const char *attachmentName, const char *effectName, Vec3 offset, Vec3 dir, float scale, int flags)
Entity::SetAttachmentObject(IFunctionHandler *pH, int characterSlot, const char *attachmentName, ScriptHandle entityId, int slot, int flags)
Entity::SetAttachmentCGF(IFunctionHandler *pH, int characterSlot, const char *attachmentName, const char* filePath)
Entity::SetAttachmentLight(IFunctionHandler *pH, int characterSlot, const char *attachmentName, SmartScriptTable lightTable, int flags)
Entity::SetAttachmentPos(IFunctionHandler *pH, int characterSlot, const char *attachmentName, Vec3 pos)
Entity::SetAttachmentAngles(IFunctionHandler *pH, int characterSlot, const char *attachmentName, Vec3 angles)
Entity::SetAttachmentDir(IFunctionHandler *pH, int characterSlot, const char *attachmentName, Vec3 dir, bool worldSpace)
Entity::HideAttachment(IFunctionHandler *pH, int characterSlot, const char *attachmentName, bool hide,bool hideShadow)
Entity::HideAllAttachments(IFunctionHandler *pH, int characterSlot, bool hide,bool hideShadow)
Entity::HideAttachmentMaster(IFunctionHandler *pH, int characterSlot, bool hide)
Entity::PhysicalizeAttachment(IFunctionHandler *pH, int characterSlot, const char* attachmentName, bool physicalize)
Entity::AttachChild(IFunctionHandler *pH, ScriptHandle childEntityId, int flags)
Entity::DetachThis(IFunctionHandler *pH )
Entity::DetachAll(IFunctionHandler *pH )
Entity::GetParent(IFunctionHandler *pH )
Entity::GetChildCount(IFunctionHandler *pH )
Entity::GetChild(IFunctionHandler *pH,int nIndex )
Entity::EnableInheritXForm( IFunctionHandler *pH,bool bEnable )
Entity::NetPresent(IFunctionHandler *pH)
Entity::SetStateClientside(IFunctionHandler *pH)
Entity::SetGeomCachePlaybackTime(IFunctionHandler *pH, float time)
Entity::SetGeomCacheStreaming(IFunctionHandler *pH, bool active, float time)
Entity::IsGeomCacheStreaming(IFunctionHandler *pH)
Entity::SetGeomCacheDrawing(IFunctionHandler *pH, bool active)
Entity::GetGeomCachePrecachedTime(IFunctionHandler *pH)
Entity::StartAnimation(IFunctionHandler *pH)
Entity::StopAnimation(IFunctionHandler *pH, int characterSlot, int layer)
Entity::ResetAnimation(IFunctionHandler *pH, int characterSlot, int layer)
Entity::RedirectAnimationToLayer0(IFunctionHandler *pH, int characterSlot, bool redirect)
Entity::SetAnimationBlendOut(IFunctionHandler *pH, int characterSlot, int layer, float blendOut)
Entity::EnableBoneAnimation(IFunctionHandler *pH, int characterSlot, int layer, const char *boneName, bool status)
Entity::EnableBoneAnimationAll(IFunctionHandler *pH, int characterSlot, int layer, bool status)
Entity::EnableProceduralFacialAnimation(IFunctionHandler *pH, bool enable)
Entity::PlayFacialAnimation(IFunctionHandler *pH, char* name, bool looping)
Entity::GetHelperPos(IFunctionHandler *pH)
Entity::GetHelperDir(IFunctionHandler *pH)
Entity::GetHelperAngles(IFunctionHandler *pH)
Entity::GetSlotHelperPos(IFunctionHandler *pH, int slot, const char *helperName, bool objectSpace)
Entity::RenderShadow(IFunctionHandler *pH)
Entity::SetRegisterInSectors(IFunctionHandler *pH)
Entity::AwakePhysics(IFunctionHandler *pH,int nAwake)
Entity::ResetPhysics(IFunctionHandler *pH)
Entity::AwakeCharacterPhysics(IFunctionHandler *pH,int nSlot,const char *sRootBoneName,int nAwake)
Entity::SetCharacterPhysicParams(IFunctionHandler *pH)
Entity::SetPhysicParams(IFunctionHandler *pH)
Entity::SetEntityPhysicParams(IFunctionHandler *pH,IPhysicalEntity *pe,int nType,IScriptTable *pTable, ICharacterInstance *pIChar)
Entity::IsColliding(IFunctionHandler *pH)
Entity::IsAnimationRunning(IFunctionHandler *pH, int characterSlot, int layer)
Entity::AddImpulse(IFunctionHandler *pH)
Entity::AddConstraint(IFunctionHandler *pH)
Entity::GetAllAuxAudioProxiesID(IFunctionHandler* pH)
Entity::GetDefaultAuxAudioProxyID(IFunctionHandler* pH)
Entity::CreateAuxAudioProxy(IFunctionHandler* pH)
Entity::RemoveAuxAudioProxy(IFunctionHandler* pH, ScriptHandle const hAudioProxyLocalID)
Entity::ExecuteAudioTrigger(IFunctionHandler* pH, ScriptHandle const hTriggerID, ScriptHandle const hAudioProxyLocalID)
Entity::StopAudioTrigger(IFunctionHandler* pH, ScriptHandle const hTriggerID, ScriptHandle const hAudioProxyLocalID)
Entity::SetAudioSwitchState(IFunctionHandler* pH, ScriptHandle const hSwitchID, ScriptHandle const hSwitchStateID, ScriptHandle const hAudioProxyLocalID)
Entity::SetAudioObstructionCalcType(IFunctionHandler* pH, int const nObstructionCalcType, ScriptHandle const hAudioProxyLocalID)
Entity::SetFadeDistance(IFunctionHandler* pH, float const fFadeDistance)
Entity::SetAudioProxyOffset(IFunctionHandler* pH, Vec3 const vOffset, ScriptHandle const hAudioProxyLocalID)
Entity::SetEnvironmentFadeDistance(IFunctionHandler* pH, float const fEnvironmentFadeDistance)
Entity::SetAudioEnvironmentID(IFunctionHandler* pH, ScriptHandle const hAudioEnvironmentID)
Entity::SetCurrentAudioEnvironments(IFunctionHandler* pH)
Entity::SetAudioRtpcValue(IFunctionHandler* pH, ScriptHandle const hRtpcID, float const fValue, ScriptHandle const hAudioProxyLocalID)
Entity::AuxAudioProxiesMoveWithEntity(IFunctionHandler* pH, bool const bCanMoveWithEntity)
Entity::TriggerEvent(IFunctionHandler *pH)
Entity::SetLocalBBox(IFunctionHandler *pH,Vec3 vMin,Vec3 vMax)
Entity::GetLocalBBox(IFunctionHandler *pH)
Entity::GetWorldBBox(IFunctionHandler *pH)
Entity::GetProjectedWorldBBox(IFunctionHandler *pH)
Entity::SetTriggerBBox(IFunctionHandler *pH,Vec3 vMin,Vec3 vMax)
Entity::GetTriggerBBox(IFunctionHandler *pH)
Entity::InvalidateTrigger(IFunctionHandler *pH)
Entity::ForwardTriggerEventsTo(IFunctionHandler *pH, ScriptHandle entityId)
Entity::SetUpdateRadius(IFunctionHandler *pH)
Entity::GetUpdateRadius(IFunctionHandler *pH)
Entity::SetPublicParam(IFunctionHandler *pH)
Entity::Activate(IFunctionHandler *pH,int bActive)
Entity::IsActive(IFunctionHandler *pH)
Entity::IsFromPool(IFunctionHandler *pH)
Entity::SetUpdatePolicy(IFunctionHandler *pH,int nUpdatePolicy)
Entity::SetAnimationEvent(IFunctionHandler *pH,int nSlot,const char *sAnimation)
Entity::SetAnimationKeyEvent(IFunctionHandler *pH,int nSlot,const char *sAnimation,int nFrameID,const char *sEvent)
Entity::SetAnimationKeyEvent(IFunctionHandler *pH)
Entity::DisableAnimationEvent(IFunctionHandler *pH,int nSlot,const char *sAnimation)
Entity::SetAnimationSpeed(IFunctionHandler *pH, int characterSlot, int layer, float speed)
Entity::SetAnimationTime(IFunctionHandler *pH,int nSlot,int nLayer,float fNormalizedTime)
Entity::GetAnimationTime(IFunctionHandler *pH,int nSlot,int nLayer)
Entity::SelectPipe(IFunctionHandler *pH)
Entity::InsertSubpipe(IFunctionHandler * pH)
Entity::CancelSubpipe(IFunctionHandler * pH)
Entity::PassParamsToPipe(IFunctionHandler * pH)
Entity::IsUsingPipe(IFunctionHandler * pH)
Entity::GotoState(IFunctionHandler *pH,const char *sStateName)
Entity::IsInState(IFunctionHandler *pH,const char *sStateName)
Entity::GetState(IFunctionHandler *pH)
Entity::GetCurAnimation(IFunctionHandler *pH)
Entity::SetTimer(IFunctionHandler *pH)
Entity::KillTimer(IFunctionHandler *pH)
Entity::SetScriptUpdateRate(IFunctionHandler *pH,int nMillis)
Entity::IsHidden(IFunctionHandler *pH)
Entity::GetBonePos(IFunctionHandler *pH)
Entity::GetBoneDir(IFunctionHandler *pH)
Entity::GetBoneVelocity(IFunctionHandler *pH, int characterSlot, const char *boneName)
Entity::GetBoneAngularVelocity(IFunctionHandler *pH, int characterSlot, const char *boneName)
Entity::GetBoneNameFromTable(IFunctionHandler *pH)
Entity::GetTouchedSurfaceID(IFunctionHandler *pH)
Entity::GetTouchedPoint(IFunctionHandler *pH)
Entity::Damage(IFunctionHandler *pH)
Entity::GetExplosionObstruction(IFunctionHandler *pH)
Entity::GetExplosionImpulse(IFunctionHandler *pH)
Entity::ActivatePlayerPhysics(IFunctionHandler *pH,bool bEnable)
Entity::GetEntitiesInContact(IFunctionHandler *pH)
Entity::SetDefaultIdleAnimations(IFunctionHandler *pH)
Entity::GetAnimationLength(IFunctionHandler *pH, int characterSlot, const char *animation)
Entity::SetAnimationFlip(IFunctionHandler *pH, int characterSlot, Vec3 flip)
Entity::SetMaterial(IFunctionHandler *pH)
Entity::GetEntityMaterial(IFunctionHandler *pH)
Entity::GetMaterial(IFunctionHandler *pH)
Entity::ChangeAttachmentMaterial(IFunctionHandler *pH, const char *attachmentName, const char *materialName)
Entity::ReplaceMaterial(IFunctionHandler *pH, int slot, const char *name, const char *replacement)
Entity::ResetMaterial(IFunctionHandler *pH, int slot)
Entity::CloneMaterial(IFunctionHandler *pH, int slot)
Entity::SetMaterialFloat( IFunctionHandler *pH, int slot,int nSubMtlId,const char *sParamName,float fValue )
Entity::GetMaterialFloat( IFunctionHandler *pH, int slot,int nSubMtlId,const char *sParamName )
Entity::SetMaterialVec3( IFunctionHandler *pH, int slot,int nSubMtlId,const char *sParamName,Vec3 vValue )
Entity::GetMaterialVec3( IFunctionHandler *pH, int slot,int nSubMtlId,const char *sParamName )
Entity::MaterialFlashInvoke(IFunctionHandler *pH)
Entity::AddMaterialLayer(IFunctionHandler *pH, int slotId, const char *shader)
Entity::RemoveMaterialLayer(IFunctionHandler *pH, int slotId, int id)
Entity::RemoveAllMaterialLayers(IFunctionHandler *pH, int slotId)
Entity::SetMaterialLayerParamF(IFunctionHandler *pH, int slotId, int layerId, const char *name, float value)
Entity::SetMaterialLayerParamV(IFunctionHandler *pH, int slotId, int layerId, const char *name, Vec3 vec)
Entity::SetMaterialLayerParamC(IFunctionHandler *pH, int slotId, int layerId, const char *name, float r, float g, float b, float a)
Entity::EnableMaterialLayer(IFunctionHandler *pH, bool enable, int layer)
Entity::ToLocal(IFunctionHandler *pH, int slotId, Vec3 point)
Entity::ToGlobal(IFunctionHandler *pH, int slotId, Vec3 point)
Entity::VectorToLocal(IFunctionHandler *pH, int slotId, Vec3 dir)
Entity::VectorToGlobal(IFunctionHandler *pH, int slotId, Vec3 dir)
Entity::GetVelocity(IFunctionHandler *pH)
Entity::GetVelocityEx(IFunctionHandler *pH)
Entity::SetVelocity(IFunctionHandler *pH, Vec3 velocity)
Entity::SetVelocityEx(IFunctionHandler *pH, Vec3 velocity, Vec3 angularVelocity)
Entity::GetSpeed(IFunctionHandler *pH)
Entity::GetMass(IFunctionHandler *pH)
Entity::GetVolume(IFunctionHandler *pH, int slot)
Entity::GetGravity(IFunctionHandler *pH)
Entity::GetSubmergedVolume(IFunctionHandler *pH, int slot, Vec3 planeNormal, Vec3 planeOrigin)
Entity::CreateLink(IFunctionHandler *pH, const char *name)
Entity::GetLinkName(IFunctionHandler *pH, ScriptHandle targetId)
Entity::SetLinkTarget(IFunctionHandler *pH, const char *name, ScriptHandle targetId)
Entity::GetLinkTarget(IFunctionHandler *pH, const char *name)
Entity::RemoveLink(IFunctionHandler *pH, const char *name)
Entity::RemoveAllLinks(IFunctionHandler *pH)
Entity::GetLink(IFunctionHandler *pH, int ith)
Entity::CountLinks(IFunctionHandler *pH)
Entity::GetTimeSinceLastSeen(IFunctionHandler *pH)
Entity::GetViewDistRatio(IFunctionHandler * pH)
Entity::SetViewDistRatio(IFunctionHandler * pH)
Entity::SetViewDistUnlimited(IFunctionHandler *pH)
Entity::SetLodRatio(IFunctionHandler * pH)
Entity::GetLodRatio(IFunctionHandler * pH)
Entity::RemoveDecals(IFunctionHandler * pH)
Entity::ForceCharacterUpdate(IFunctionHandler *pH, int characterSlot, bool updateAlways)
Entity::CharacterUpdateAlways(IFunctionHandler *pH, int characterSlot, bool updateAlways)
Entity::CharacterUpdateOnRender(IFunctionHandler * pH, int characterSlot, bool bUpdateOnRender)
Entity::SetAnimateOffScreenShadow(IFunctionHandler * pH, bool bAnimateOffScreenShadow)
Entity::Hide(IFunctionHandler *pH)
Entity::CheckCollisions(IFunctionHandler *pH)
Entity::AwakeEnvironment(IFunctionHandler *pH)
Entity::NoExplosionCollision(IFunctionHandler *pH)
Entity::NoBulletForce(IFunctionHandler *pH,bool state)
Entity::GetPhysicalStats(IFunctionHandler *pH)
Entity::UpdateAreas(IFunctionHandler * pH)
Entity::IsPointInsideArea(IFunctionHandler * pH, int areaId, Vec3 point)
Entity::IsEntityInsideArea(IFunctionHandler * pH, int areaId, ScriptHandle entityId)
Entity::GetDistance(IFunctionHandler *pH)
Entity::cmpIntersectionResult(const void *v1, const void *v2)
Entity::IntersectRay(IFunctionHandler *pH, int slot, Vec3 rayOrigin, Vec3 rayDir, float maxDistance)
Entity::IStatObjRayIntersect(IStatObj *pStatObj, const Vec3 &rayOrigin, const Vec3 &rayDir, float maxDistance, SIntersectionResult *pOutResult, unsigned int maxResults)
Entity::ProcessBroadcastEvent(IFunctionHandler* pH)
Entity::ActivateOutput(IFunctionHandler* pH)
Entity::CreateCameraProxy(IFunctionHandler* pH)
Entity::BreakToPieces(IFunctionHandler* pH, int nSlot, int nPiecesSlot, float fExplodeImp, Vec3 vHitPt, Vec3 vHitImp, float fLifeTime, bool bMaterialEffects)
Entity::AttachSurfaceEffect(IFunctionHandler* pH, int nSlot, const char *effect, bool countPerUnit, const char *form, const char *typ, float countScale, float sizeScale)
Entity::RagDollize(IFunctionHandler* pH, int slot)
Entity::SetColliderMode(IFunctionHandler *pH, int mode)
Entity::UnSeenFrames(IFunctionHandler *pH)
Entity::DeleteParticleEmitter(IFunctionHandler *pH, int slot)
Entity::RegisterForAreaEvents(IFunctionHandler*pH, int enable)
Entity::RenderAlways(IFunctionHandler*pH, int enable)
Entity::GetTimeOfDayHour(IFunctionHandler *pH)
Entity::CreateDRSProxy(IFunctionHandler* pH)
GameAudio::GetSignal(IFunctionHandler *pH, const char* pSignalName )
GameAudio::JustPlayEntitySignal(IFunctionHandler *pH, TAudioSignalID signalId, ScriptHandle entityId )
GameAudio::JustPlayPosSignal(IFunctionHandler *pH, TAudioSignalID signalId, Vec3 pos )
GameAudio::JustPlaySignal(IFunctionHandler *pH, TAudioSignalID signalId )
GameAudio::PlayEntitySignal(IFunctionHandler *pH, TAudioSignalID signalId, ScriptHandle handleEntityId )
GameAudio::IsPlayingEntitySignal( IFunctionHandler *pH, TAudioSignalID signalId, ScriptHandle handleEntityId )
GameAudio::StopEntitySignal(IFunctionHandler *pH, TAudioSignalID signalId, ScriptHandle handleEntityId )
GameAudio::SetEntitySignalParam(IFunctionHandler *pH, TAudioSignalID signalId, ScriptHandle handleEntityId, const char *param, float fValue )
GameAudio::PlaySignal(IFunctionHandler *pH, TAudioSignalID signalId )
GameAudio::StopSignal( IFunctionHandler *pH, TAudioSignalID signalId )
GameAudio::Announce( IFunctionHandler *pH, const char* announcement, int context )
HitDeathReactions::OnHit(IFunctionHandler *pH, SmartScriptTable scriptHitInfo)
HitDeathReactions::ExecuteDeathReaction (IFunctionHandler *pH, SmartScriptTable reactionParams)
HitDeathReactions::ExecuteHitReaction (IFunctionHandler *pH, SmartScriptTable reactionParams)
HitDeathReactions::EndCurrentReaction(IFunctionHandler *pH)
HitDeathReactions::IsValidReaction(IFunctionHandler *pH, SmartScriptTable validationParams, SmartScriptTable scriptHitInfo)
HitDeathReactions::StartReactionAnim(IFunctionHandler *pH)
HitDeathReactions::EndReactionAnim(IFunctionHandler *pH)
HitDeathReactions::StartInteractiveAction(IFunctionHandler *pH, const char* szActionName)
Actor::PlayerSetViewAngles(IFunctionHandler *pH,Ang3 vAngles)
Actor::DumpActorInfo(IFunctionHandler *pH)
Actor::Revive(IFunctionHandler *pH)
Actor::Kill(IFunctionHandler *pH)
Actor::ShutDown(IFunctionHandler *pH)
Actor::SetParams(IFunctionHandler *pH)
Actor::GetHeadDir(IFunctionHandler *pH)
Actor::GetAimDir(IFunctionHandler *pH)
Actor::GetChannel(IFunctionHandler *pH)
Actor::IsPlayer(IFunctionHandler *pH)
Actor::IsMyPlayer(IFunctionHandler *pH)
Actor::UseLadder(IFunctionHandler *pH, ScriptHandle ladderId)
Actor::IsLocalClient(IFunctionHandler *pH)
Actor::PostPhysicalize(IFunctionHandler *pH)
Actor::GetLinkedVehicleId(IFunctionHandler *pH)
Actor::LinkToEntity(IFunctionHandler *pH)
Actor::SetAngles(IFunctionHandler *pH,Ang3 vAngles)
Actor::GetAngles(IFunctionHandler *pH)
Actor::SetMovementTarget(IFunctionHandler *pH, Vec3 pos, Vec3 target, Vec3 up, float speed )
Actor::CameraShake(IFunctionHandler *pH,float amount,float duration,float frequency,Vec3 pos)
Actor::SetViewShake(IFunctionHandler *pH, Ang3 shakeAngle, Vec3 shakeShift, float duration, float frequency, float randomness)
Actor::SetExtensionParams(IFunctionHandler* pH, const char *extension, SmartScriptTable params)
Actor::SvRefillAllAmmo(IFunctionHandler* pH, const char* refillType, bool refillAll, int grenadeCount, bool refillCurrentGrenadeType)
Actor::ClRefillAmmoResult(IFunctionHandler* pH, bool ammoRefilled)
Actor::SetHealth(IFunctionHandler *pH, float health)
Actor::DamageInfo(IFunctionHandler *pH, ScriptHandle shooter, ScriptHandle target, ScriptHandle weapon, ScriptHandle projectile, float damage, int damageType, Vec3 hitDirection)
Actor::GetLowHealthThreshold(IFunctionHandler *pH)
Actor::SetMaxHealth(IFunctionHandler *pH, float health)
Actor::GetHealth(IFunctionHandler *pH)
Actor::IsImmuneToForbiddenArea(IFunctionHandler *pH)
Actor::GetMaxHealth(IFunctionHandler *pH)
Actor::QueueAnimationState(IFunctionHandler *pH, const char *animationState)
Actor::CreateCodeEvent(IFunctionHandler *pH,SmartScriptTable params)
Actor::PauseAnimationGraph(IFunctionHandler *pH)
Actor::ResumeAnimationGraph(IFunctionHandler *pH)
Actor::HurryAnimationGraph(IFunctionHandler *pH)
Actor::SetSpectatorMode(IFunctionHandler *pH, int mode, ScriptHandle targetId)
Actor::GetSpectatorMode(IFunctionHandler *pH)
Actor::GetSpectatorState(IFunctionHandler *pH)
Actor::GetSpectatorTarget(IFunctionHandler* pH)
Actor::Fall(IFunctionHandler *pH, Vec3 hitPos)
Actor::GetExtraHitLocationInfo(IFunctionHandler *pH, int slot, int partId)
Actor::StandUp(IFunctionHandler *pH)
Actor::SetForcedLookDir(IFunctionHandler *pH, CScriptVector dir)
Actor::ClearForcedLookDir(IFunctionHandler *pH)
Actor::SetForcedLookObjectId(IFunctionHandler *pH, ScriptHandle objectId)
Actor::ClearForcedLookObjectId(IFunctionHandler *pH)
Actor::SetPhysicalizationProfile(IFunctionHandler *pH, const char *profile)
Actor::GetPhysicalizationProfile(IFunctionHandler *pH)
Actor::DisableHitReaction(IFunctionHandler *pH)
Actor::EnableHitReaction(IFunctionHandler *pH)
Actor::CreateIKLimb( IFunctionHandler *pH, int slot, const char *limbName, const char *rootBone, const char *midBone, const char *endBone, int flags)
Actor::HolsterItem(IFunctionHandler *pH, bool holster)
Actor::DropItem(IFunctionHandler *pH, ScriptHandle itemId)
Actor::PickUpItem(IFunctionHandler *pH, ScriptHandle itemId)
Actor::IsCurrentItemHeavy( IFunctionHandler* pH )
Actor::PickUpPickableAmmo(IFunctionHandler *pH, const char *ammoName, int count)
Actor::SelectLastItem(IFunctionHandler *pH)
Actor::SelectItemByName(IFunctionHandler *pH, const char *name)
Actor::SelectItem(IFunctionHandler *pH, ScriptHandle itemId, bool forceSelect)
Actor::SelectNextItem(IFunctionHandler *pH, int direction, bool keepHistory, const char *category)
Actor::SimpleFindItemIdInCategory(IFunctionHandler *pH, const char *category)
Actor::PlayAction(IFunctionHandler *pH, const char* action)
Actor::CanSpectacularKillOn(IFunctionHandler *pH, ScriptHandle targetId)
Actor::StartSpectacularKill(IFunctionHandler *pH, ScriptHandle targetId)
Actor::RegisterInAutoAimManager(IFunctionHandler *pH)
Actor::RefreshPickAndThrowObjectPhysics( IFunctionHandler *pH )
Actor::SvGiveAmmoClips( IFunctionHandler* pH, int numClips )
Actor::IsGod( IFunctionHandler *pH )
Actor::AcquireOrReleaseLipSyncExtension(IFunctionHandler *pH)
Actor::GetFaction(IFunctionHandler *pH)
Actor::SetFaction(IFunctionHandler *pH, int nFaction, bool bForce)
GameAI::RegisterWithModule(IFunctionHandler* pH, const char* moduleName, ScriptHandle entityID)
GameAI::UnregisterWithModule(IFunctionHandler* pH, const char* moduleName, ScriptHandle entityID)
GameAI::UnregisterWithAllModules(IFunctionHandler* pH, ScriptHandle entityID)
GameAI::PauseModule(IFunctionHandler* pH, const char* moduleName, ScriptHandle entityID)
GameAI::PauseAllModules(IFunctionHandler* pH, ScriptHandle entityID)
GameAI::ResumeModule(IFunctionHandler* pH, const char* moduleName, ScriptHandle entityID)
GameAI::ResumeAllModules(IFunctionHandler* pH, ScriptHandle entityID)
GameAI::GetClosestEntityToTarget(IFunctionHandler* funcHandler, Vec3 attackerPos, Vec3 targetPos, const char* pClassName, float radius, float maxAngle)
GameAI::GetBattleFrontPosition(IFunctionHandler* pH, int groupID)
GameAI::ResetAdvantagePointOccupancyControl(IFunctionHandler* pH)
GameAI::OccupyAdvantagePoint(IFunctionHandler* pH, ScriptHandle entityID, Vec3 point)
GameAI::ReleaseAdvantagePointFor(IFunctionHandler* pH, ScriptHandle entityID)
GameAI::IsAdvantagePointOccupied(IFunctionHandler* pH, Vec3 point)
GameAI::StartSearchModuleFor(IFunctionHandler* pH, int groupID, Vec3 targetPos)
GameAI::StopSearchModuleFor(IFunctionHandler* pH, int groupID)
GameAI::MarkAssignedSearchSpotAsUnreachable(IFunctionHandler* pH, ScriptHandle entityID)
GameAI::ResetRanges(IFunctionHandler* pH, ScriptHandle entityID)
GameAI::AddRange(IFunctionHandler* pH, ScriptHandle entityID, float range, const char* enterSignal, const char* leaveSignal)
GameAI::ResetAloneDetector(IFunctionHandler* pH, ScriptHandle entityID)
GameAI::SetupAloneDetector(IFunctionHandler* pH, ScriptHandle entityID, float range, const char* aloneSignal, const char* notAloneSignal)
GameAI::AddActorClassToAloneDetector(IFunctionHandler* pH, ScriptHandle entityID, const char* entityClassName)
GameAI::RemoveActorClassFromAloneDetector(IFunctionHandler* pH, ScriptHandle entityID, const char* entityClassName)
GameAI::IsAloneForAloneDetector(IFunctionHandler* pH, ScriptHandle entityID)
GameAI::GetRangeState(IFunctionHandler* pH, ScriptHandle entityID, int rangeID)
GameAI::ChangeRange(IFunctionHandler* pH, ScriptHandle entityID, int rangeID, float distance)
GameAI::RegisterObjectVisible(IFunctionHandler *pH, ScriptHandle entityID)
GameAI::UnregisterObjectVisible(IFunctionHandler *pH, ScriptHandle entityID)
GameAI::IsAISystemEnabled(IFunctionHandler *pH)
GameAI::RegisterEntityForAISquadManager(IFunctionHandler* pH, ScriptHandle entityID)
GameAI::RemoveEntityForAISquadManager(IFunctionHandler* pH, ScriptHandle entityID)
GameAI::GetSquadId(IFunctionHandler* pH, ScriptHandle entityId)
GameAI::GetSquadMembers(IFunctionHandler* pH, int squadId)
GameAI::GetAveragePositionOfSquadScopeUsers(IFunctionHandler* pH, ScriptHandle entityIdHandle, const char* squadScopeName)
GameAI::GetSquadScopeUserCount(IFunctionHandler* pH, ScriptHandle entityIdHandle, const char* squadScopeName)
GameAI::IsSwimmingUnderwater(IFunctionHandler* pH, ScriptHandle entityID)
GameAI::GetAgentTypeID(IFunctionHandler* pH, const char* name)
GameAI::IsLocationValidInNavigationMesh(IFunctionHandler* pH, int agentTypeID, Vec3 pos)
Boids::CreateFlock( IFunctionHandler *pH, SmartScriptTable entity,int nType,SmartScriptTable paramTable )
Boids::SetFlockParams(IFunctionHandler *pH,SmartScriptTable entity,SmartScriptTable paramTable)
Boids::EnableFlock(IFunctionHandler *pH,SmartScriptTable entity,bool bEnable)
Boids::SetFlockPercentEnabled(IFunctionHandler *pH,SmartScriptTable entity,int percent )
Boids::SetAttractionPoint(IFunctionHandler *pH,SmartScriptTable entity, Vec3 point )
Boids::OnBoidHit( IFunctionHandler *pH,SmartScriptTable flockEntity,SmartScriptTable boidEntity,SmartScriptTable hit )
Boids::CanPickup(IFunctionHandler *pH, SmartScriptTable flockEntity, SmartScriptTable boidEntity)
Boids::GetUsableMessage(IFunctionHandler *pH, SmartScriptTable flockEntity)
Boids::OnPickup(IFunctionHandler *pH, SmartScriptTable flockEntity, SmartScriptTable boidEntity, bool bPickup, float fThrowSpeed)
Boids::Land(IFunctionHandler *pH, SmartScriptTable flockEntity)
Boids::TakeOff(IFunctionHandler *pH, SmartScriptTable flockEntity)
InteractiveObject::GetInteractiveObject( IFunctionHandler *pH )
InteractiveObject::CanUse( IFunctionHandler *pH, ScriptHandle userId )
InteractiveObject::Use( IFunctionHandler *pH, ScriptHandle userId )
InteractiveObject::StopUse( IFunctionHandler *pH, ScriptHandle userId )
InteractiveObject::AbortUse( IFunctionHandler *pH )
LightningArc::TriggerSpark(IFunctionHandler* pFunction)
LightningArc::Enable(IFunctionHandler* pFunction, bool enable)
LightningArc::ReadLuaParameters(IFunctionHandler* pFunction)
Game::AddTacticalEntity(IFunctionHandler *pH, ScriptHandle id, int type)
Game::RemoveTacticalEntity(IFunctionHandler *pH, ScriptHandle id, int type)
Game::RegisterWithAutoAimManager(IFunctionHandler *pH, ScriptHandle entityId, float innerRadiusFactor, float outerRadiusFactor, float snapRadiusFactor)
Game::UnregisterFromAutoAimManager(IFunctionHandler *pH, ScriptHandle entityId)
Game::OnAmmoCrateSpawned(IFunctionHandler *pH, bool providesFragGrenades)
Game::CacheResource(IFunctionHandler *pH, const char* whoIsRequesting, const char* resourceName, int resourceType, int resourceFlags)
Game::CacheActorClassResources(IFunctionHandler *pH, const char* actorEntityClassName)
Game::CacheEntityArchetype(IFunctionHandler *pH, const char* archetypeName)
Game::ShowMainMenu(IFunctionHandler *pH)
Game::PauseGame( IFunctionHandler *pH, bool pause )
Game::QueryBattleStatus(IFunctionHandler *pH)
Game::IsPlayer(IFunctionHandler *pH, ScriptHandle entityId)
Game::RegisterVTOL(IFunctionHandler *pH, ScriptHandle entityId)
Game::OnEnvironmentalWeaponHealthChanged( IFunctionHandler *pH, ScriptHandle entityId )
Game::ResetEntity( IFunctionHandler *pH, ScriptHandle entityId )
Game::SetDangerousRigidBodyDangerStatus( IFunctionHandler *pH, ScriptHandle entityId, bool isDangerous, ScriptHandle triggerPlayerId )
Game::SendEventToGameObject( IFunctionHandler* pH, ScriptHandle entityId, char* event )
Game::IsMountedWeaponUsableWithTarget(IFunctionHandler *pH)
Game::SaveCheckpoint(IFunctionHandler *pH, ScriptHandle checkpointId, const char *fileName)
Game::LoadCheckpoint(IFunctionHandler *pH, const char *fileName)
Game::QuickLoad( IFunctionHandler *pH )
Game::QueueDeferredKill(IFunctionHandler* pH, ScriptHandle entityId)
Game::CacheEquipmentPack(IFunctionHandler* pH, const char* equipmentPackName)
Game::DebugDrawCylinder( IFunctionHandler *pH, float x, float y, float z, float radius, float height, int r, int g, int b, int a )
Game::DebugDrawCone( IFunctionHandler *pH, float x, float y, float z, float radius, float height, int r, int g, int b, int a )
Game::DebugDrawAABB( IFunctionHandler *pH, float x, float y, float z, float x2, float y2, float z2, int r, int g, int b, int a )
Game::LoadPrefabLibrary( IFunctionHandler* pH, const char *filename )
Game::SpawnPrefab( IFunctionHandler* pH, ScriptHandle entityId,const char *libname,const char *prefabname,uint32 seed,uint32 nMaxSpawn)
Game::MovePrefab( IFunctionHandler* pH, ScriptHandle entityId)
Game::DeletePrefab( IFunctionHandler* pH, ScriptHandle entityId)
Game::HidePrefab( IFunctionHandler* pH, ScriptHandle entityId, bool bHide)
ProtectedBinds::GetPersistantStat(IFunctionHandler *pH, const char *name)
ProtectedBinds::SetPersistantStat(IFunctionHandler *pH, const char *name, SmartScriptTable valueTab)
ProtectedBinds::SavePersistantStatsToBlaze(IFunctionHandler *pH)
ProtectedBinds::GetProfileAttribute( IFunctionHandler *pH, const char* name )
ProtectedBinds::SetProfileAttribute( IFunctionHandler *pH, const char* name, SmartScriptTable valueTab )
ProtectedBinds::ActivateDemoEventEntitlement( IFunctionHandler *pH )
GameRules::IsServer(IFunctionHandler *pH)
GameRules::IsClient(IFunctionHandler *pH)
GameRules::IsMultiplayer(IFunctionHandler *pH)
GameRules::CanCheat(IFunctionHandler *pH)
GameRules::SpawnPlayer(IFunctionHandler *pH, int channelId, const char *name, const char *className, Vec3 pos, Vec3 angles)
GameRules::Revive(IFunctionHandler *pH, ScriptHandle playerId)
GameRules::RevivePlayer(IFunctionHandler *pH, ScriptHandle playerId, Vec3 pos, Vec3 angles, int teamId, bool clearInventory)
GameRules::RevivePlayerInVehicle(IFunctionHandler *pH, ScriptHandle playerId, ScriptHandle vehicleId, int seatId, int teamId, bool clearInventory)
GameRules::IsPlayer(IFunctionHandler *pH, ScriptHandle playerId)
GameRules::IsProjectile(IFunctionHandler *pH, ScriptHandle entityId)
GameRules::AddSpawnLocation(IFunctionHandler *pH, ScriptHandle entityId, bool isInitialSpawn, bool doVisTest, const char *pGroupName)
GameRules::RemoveSpawnLocation(IFunctionHandler *pH, ScriptHandle id, bool isInitialSpawn)
GameRules::EnableSpawnLocation(IFunctionHandler *pH, ScriptHandle id, bool isInitialSpawn, const char *pGroupName)
GameRules::DisableSpawnLocation(IFunctionHandler *pH, ScriptHandle id, bool isInitialSpawn)
GameRules::GetFirstSpawnLocation(IFunctionHandler *pH, int teamId)
GameRules::AddSpawnGroup(IFunctionHandler *pH, ScriptHandle groupId)
GameRules::AddSpawnLocationToSpawnGroup(IFunctionHandler *pH, ScriptHandle groupId, ScriptHandle location)
GameRules::RemoveSpawnLocationFromSpawnGroup(IFunctionHandler *pH, ScriptHandle groupId, ScriptHandle location)
GameRules::RemoveSpawnGroup(IFunctionHandler *pH, ScriptHandle groupId)
GameRules::GetSpawnGroups(IFunctionHandler *pH)
GameRules::IsSpawnGroup(IFunctionHandler *pH, ScriptHandle entityId)
GameRules::SetPlayerSpawnGroup(IFunctionHandler *pH, ScriptHandle playerId, ScriptHandle groupId)
GameRules::AddSpectatorLocation(IFunctionHandler *pH, ScriptHandle location)
GameRules::RemoveSpectatorLocation(IFunctionHandler *pH, ScriptHandle id)
GameRules::ClientSelfHarm(IFunctionHandler *pH, float dmg, int materialId, int partId, int typeId, Vec3 dir)
GameRules::ClientSelfHarmByEntity(IFunctionHandler *pH, ScriptHandle sourceEntity, float dmg, int materialId, int partId, int typeId, Vec3 dir)
GameRules::ServerHarmVehicle(IFunctionHandler *pH, ScriptHandle vehicle, float dmg, int materialId, int typeId, Vec3 dir)
GameRules::GetTeamName(IFunctionHandler *pH, int teamId)
GameRules::GetTeamId(IFunctionHandler *pH, const char *teamName)
GameRules::SetTeam(IFunctionHandler *pH, int teamId, ScriptHandle playerId)
GameRules::ClientSetTeam(IFunctionHandler *pH, int teamId, ScriptHandle playerId)
GameRules::GetTeam(IFunctionHandler *pH, ScriptHandle playerId)
GameRules::ForbiddenAreaWarning(IFunctionHandler *pH, bool active, int timer, ScriptHandle targetId)
GameRules::GetServerTime(IFunctionHandler *pH)
GameRules::EndGame(IFunctionHandler *pH)
GameRules::NextLevel(IFunctionHandler *pH)
GameRules::GetHitMaterialId(IFunctionHandler *pH, const char *materialName)
GameRules::GetHitTypeId(IFunctionHandler *pH, const char *type)
GameRules::GetHitType(IFunctionHandler *pH, int id)
GameRules::IsHitTypeIdMelee(IFunctionHandler *pH, int hitTypeId)
GameRules::IsDemoMode(IFunctionHandler *pH)
GameRules::DebugCollisionDamage(IFunctionHandler *pH)
GameRules::SendDamageIndicator(IFunctionHandler* pH, ScriptHandle targetId, ScriptHandle shooterId, ScriptHandle weaponId, Vec3 dir, float damage, int projectileClassId, int hitTypeId)
GameRules::EnteredGame(IFunctionHandler* pH)
GameRules::Announce(IFunctionHandler *pH, ScriptHandle playerId, const char *announcement, int context)
GameRules::Watch(IFunctionHandler *pH, const char* text)
GameRules::DemiGodDeath(IFunctionHandler *pH)
GameRules::GetPrimaryTeam(IFunctionHandler *pH)
GameRules::AddForbiddenArea( IFunctionHandler *pH, ScriptHandle entityId )
GameRules::RemoveForbiddenArea( IFunctionHandler *pH, ScriptHandle entityId )
GameRules::MakeMovementVisibleToAI( IFunctionHandler *pH, const char* entityClass )
GameRules::SendGameRulesObjectiveEntitySignal(IFunctionHandler *pH, ScriptHandle entityId, int signal)
GameRules::ReRecordEntity(IFunctionHandler *pH, ScriptHandle entityId)
GameRules::ShouldGiveLocalPlayerHitFeedback2DSound(IFunctionHandler *pH, float damage)
GameRules::CanUsePowerStruggleNode( IFunctionHandler *pH, ScriptHandle userId, ScriptHandle entityId )
GameRules::SendTextMessage(IFunctionHandler *pH)
GameRules::DisplayActionableMenu(IFunctionHandler* pH, SmartScriptTable actions)
GameRules::IsActionable(IFunctionHandler* pH, ScriptHandle userId, ScriptHandle entityId)
GameRules::DidActionsChange(IFunctionHandler* pH, ScriptHandle userId, ScriptHandle entityId)
GameRules::GetActions(IFunctionHandler* pH, ScriptHandle userId, ScriptHandle entityId, SmartScriptTable actions)
GameRules::PerformAction(IFunctionHandler* pH, ScriptHandle userId, ScriptHandle entityId, const char* action)
GameRules::GetStorageContent(IFunctionHandler* pH, ScriptHandle entityId, const char* entityClassFilter)
Item::Reset(IFunctionHandler *pH)
Item::CanPickUp(IFunctionHandler *pH, ScriptHandle userId)
Item::CanUse(IFunctionHandler *pH, ScriptHandle userId)
Item::CanUseVehicle(IFunctionHandler *pH, ScriptHandle userId)
Item::IsPickable(IFunctionHandler *pH)
Item::IsMounted(IFunctionHandler *pH)
Item::GetUsableText(IFunctionHandler *pH)
Item::GetOwnerId(IFunctionHandler *pH)
Item::StartUse(IFunctionHandler *pH, ScriptHandle userId)
Item::StopUse(IFunctionHandler *pH, ScriptHandle userId)
Item::Use(IFunctionHandler *pH, ScriptHandle userId)
Item::IsUsed(IFunctionHandler *pH)
Item::GetMountedDir(IFunctionHandler *pH)
Item::SetMountedAngleLimits(IFunctionHandler *pH, float min_pitch, float max_pitch, float yaw_range)
Item::OnHit(IFunctionHandler *pH, SmartScriptTable hitTable)
Item::IsDestroyed(IFunctionHandler *pH)
Item::OnUsed(IFunctionHandler *pH, ScriptHandle userId)
Item::HasAccessory(IFunctionHandler *pH, const char* accessoryName)
Item::AllowDrop(IFunctionHandler *pH)
Item::DisallowDrop(IFunctionHandler *pH)
Item::GetActions(IFunctionHandler *pH, ScriptHandle userId, SmartScriptTable actions)
Item::DidActionsChange(IFunctionHandler *pH, ScriptHandle userId)
Item::IsActionable(IFunctionHandler *pH, ScriptHandle userId)
Item::PerformAction(IFunctionHandler *pH, ScriptHandle userId, const char* action)
Item::GetDisplayName(IFunctionHandler *pH)
Item::IsStackable(IFunctionHandler *pH)
Item::GetMaxStackSize(IFunctionHandler *pH)
Item::GetStackCount(IFunctionHandler *pH)
Item::SetStackCount(IFunctionHandler *pH, int count)
Item::IsMagazine(IFunctionHandler *pH)
Item::IsDestroyable(IFunctionHandler *pH)
Item::GetMaxHealth(IFunctionHandler *pH)
Item::GetHealth(IFunctionHandler *pH)
Item::SetHealth(IFunctionHandler *pH, float health)
Item::IsConsumable(IFunctionHandler *pH)
Item::IsRefillable(IFunctionHandler *pH)
Item::GetConsumablePercent(IFunctionHandler *pH)
Item::SetConsumablePercent(IFunctionHandler *pH, float percent)
Item::GetConsumableType(IFunctionHandler *pH)
Item::SetConsumableType(IFunctionHandler *pH, int type)
Item::GetGUID(IFunctionHandler *pH)
Weapon::SetAmmoCount(IFunctionHandler *pH)
Weapon::GetAmmoCount(IFunctionHandler *pH)
Weapon::GetClipSize(IFunctionHandler *pH)
Weapon::GetAmmoType(IFunctionHandler *pH)
Weapon::SetCurrentFireMode(IFunctionHandler *pH, const char *name)
Weapon::SupportsAccessory(IFunctionHandler *pH, const char *accessoryName)
Weapon::GetAccessory(IFunctionHandler *pH, const char *accessoryName)
Weapon::AttachAccessory(IFunctionHandler *pH, const char *className, bool attach, bool force)
Weapon::SwitchAccessory(IFunctionHandler *pH, const char *className)
Weapon::Reload(IFunctionHandler *pH)
MatchMaking::IsSquadLeaderOrSolo( IFunctionHandler *pH )
MatchMaking::CancelSearch( IFunctionHandler *pH )
MatchMaking::IsJoiningSession( IFunctionHandler *pH )
MatchMaking::IsSessionHost( IFunctionHandler *pH )
MatchMaking::IsInSession( IFunctionHandler *pH )
MatchMaking::HasGameStarted( IFunctionHandler *pH )
MatchMaking::HaveEnoughPlayersToStart( IFunctionHandler *pH )
MatchMaking::GetNumPlayersInCurrentSession( IFunctionHandler *pH )
MatchMaking::GetNumPlayersInSquad( IFunctionHandler* pH )
MatchMaking::GetMaxNumPlayers( IFunctionHandler* pH )
MatchMaking::StartSearch( IFunctionHandler *pH, int freeSlotsRequired, int maxResults, SmartScriptTable searchParams )
MatchMaking::JoinServer( IFunctionHandler *pH, int sessionId )
MatchMaking::CreateServer( IFunctionHandler *pH, SmartScriptTable sessionParams )
MatchMaking::MergeWithServer( IFunctionHandler *pH, int sessionId )
MatchMaking::RequestUpdateCall( IFunctionHandler* pH, float timeToCall )
MatchMaking::MMLog( IFunctionHandler *pH, const char* message, bool isError )
MatchMaking::GetCurrentRegion( IFunctionHandler* pH )
MatchMaking::GetCurrentLanguage( IFunctionHandler* pH )
MatchMaking::GetCurrentMatchMakingVersionNum( IFunctionHandler* pH )
MatchMaking::GetCurrentPlaylist( IFunctionHandler* pH )
MatchMaking::GetCurrentVariant( IFunctionHandler* pH )
MatchMaking::GetAvailableDLCs( IFunctionHandler* pH )
MatchMaking::GetAverageSkillScore( IFunctionHandler* pH )
MatchMaking::GetCurrentPing( IFunctionHandler* pH )
MatchMaking::GetCurrentGameMode( IFunctionHandler* pH )
MatchMaking::GetCurrentMap( IFunctionHandler* pH )
Animal::OnHit(IFunctionHandler *pH, SmartScriptTable animalEntity, SmartScriptTable hitTable)
Animal::IsDead(IFunctionHandler *pH, SmartScriptTable animalEntity)
BaseBuildingSystem::GetPlotSigns(IFunctionHandler *pH)
BaseBuildingSystem::GetPlotSign(IFunctionHandler *pH, ScriptHandle plotSignId)
PlotSign::GetPartCount(IFunctionHandler* pH)
PlotSign::GetPartId(IFunctionHandler* pH, int index)
PlotSign::GetPartTypeId(IFunctionHandler* pH, int partId)
PlotSign::GetPartClassName(IFunctionHandler* pH, int partId)
PlotSign::GetPartHierarchyParents(IFunctionHandler* pH, int partId)
PlotSign::CanPackUp(IFunctionHandler* pH, int partId)
PlotSign::GetMaxHealth(IFunctionHandler* pH, int partId)
PlotSign::SetDamage(IFunctionHandler* pH, int partId, float damage)
PlotSign::GetDamage(IFunctionHandler* pH, int partId)
PlotSign::GetOwnerSteam64Id(IFunctionHandler *pH)
PlotSign::GetClanId(IFunctionHandler *pH)
PlotSign::AddPartByType(IFunctionHandler* pH, int partTypeId, Vec3 pos, Ang3 ang)
PlotSign::PackupPart(IFunctionHandler* pH, int partId)
PlotSign::DeletePart(IFunctionHandler* pH, int partId)
PersistentWorldManager::ApplyRadiationToPlayer(IFunctionHandler *pH, ScriptHandle eId, int radiation)
PersistentWorldManager::SavePersistentPlayer(IFunctionHandler *pH, ScriptHandle eId)
PersistentWorldManager::ResetVehicleSpawner(IFunctionHandler *pH)
AISpawnerManager::SpawnCategory(IFunctionHandler *pH, Vec3 pos, const char* category, bool forceNum, float minRadius, float maxRadius, float radius)
AISpawnerManager::SpawnHorde(IFunctionHandler *pH, Vec3 pos, const char* category)
AISpawnerManager::SpawnInvasion(IFunctionHandler *pH, Vec3 posSpawn, Vec3 posDestination, const char* category, bool forceNum)
ItemSpawnerManager::GiveItem(IFunctionHandler *pH, ScriptHandle playerId, const char *className)
ItemSpawnerManager::SpawnItem(IFunctionHandler *pH, const char *className, Vec3 pos)
ItemSpawnerManager::SpawnCategory(IFunctionHandler *pH, const char* categoryName, Vec3 pos)
MyPlayer::GetActivePlotSignId(IFunctionHandler *pH)
MyPlayer::TeleportTo(IFunctionHandler *pH)
MyPlayer::GetSteam64Id(IFunctionHandler *pH)
MyPlayer::SetHealth(IFunctionHandler *pH, float value)
MyPlayer::GetHealth(IFunctionHandler *pH)
MyPlayer::SetFood(IFunctionHandler *pH, float value)
MyPlayer::GetFood(IFunctionHandler *pH)
MyPlayer::SetWater(IFunctionHandler *pH, float value)
MyPlayer::GetWater(IFunctionHandler *pH)
MyPlayer::SetTemperature(IFunctionHandler *pH, float value)
MyPlayer::GetTemperature(IFunctionHandler *pH)
MyPlayer::SetRadiation(IFunctionHandler *pH, float value)
MyPlayer::GetRadiation(IFunctionHandler *pH)
MyPlayer::SetBleedingLevel(IFunctionHandler *pH, int value)
MyPlayer::GetBleedingLevel(IFunctionHandler *pH)
MyPlayer::SetPoisonType(IFunctionHandler *pH, const char* value)
MyPlayer::IsPoisoned(IFunctionHandler *pH)
MyPlayer::SetOxygen(IFunctionHandler *pH, float value)
MyPlayer::GetOxygen(IFunctionHandler *pH)
MyPlayer::SetStamina(IFunctionHandler *pH, float value)
MyPlayer::GetStamina(IFunctionHandler *pH)
MyPlayer::SetTorpidity(IFunctionHandler *pH, float value)
MyPlayer::GetTorpidity(IFunctionHandler *pH)
MyPlayer::SetUnconcious(IFunctionHandler *pH, bool value)
MyPlayer::IsUnconcious(IFunctionHandler *pH)
MyPlayer::GetClanId(IFunctionHandler *pH)
MyPlayer::GetClanData(IFunctionHandler *pH)
MyPlayer::ResetActionable(IFunctionHandler *pH)
Turret::Enable( IFunctionHandler* pH )
Turret::Disable( IFunctionHandler* pH )
Turret::OnPropertyChange( IFunctionHandler* pH )
Turret::OnHit( IFunctionHandler* pH, SmartScriptTable scriptHitInfo )
Turret::SetStateById( IFunctionHandler* pH, int stateId )
Turret::SetFactionToPlayerFaction( IFunctionHandler* pH )
HUD::SetObjectiveStatus(IFunctionHandler *pH,const char* pObjectiveID, int status, bool silent)
HUD::SetObjectiveEntity(IFunctionHandler *pH,const char* pObjectiveID,const char* entityName)
HUD::ClearObjectiveEntity(IFunctionHandler *pH,const char* pObjectiveID)
HUD::AddEntityToRadar(IFunctionHandler *pH, ScriptHandle entityId)
HUD::RemoveEntityFromRadar(IFunctionHandler *pH, ScriptHandle entityId)
HUD::AddEntitySilhouette(IFunctionHandler *pH, ScriptHandle entityId, float r, float g, float b, float a)
HUD::OnGameStatusUpdate(IFunctionHandler *pH, int goodBad, const char *msg)
HUD::RemoveObjective(IFunctionHandler *pH, ScriptHandle entityId)
Movie::PlaySequence( IFunctionHandler *pH,const char *sSequenceName )
Movie::StopSequence( IFunctionHandler *pH,const char* sSequenceName)
Movie::AbortSequence( IFunctionHandler *pH,const char* sSequenceName)
Movie::StopAllSequences(IFunctionHandler *pH)
Movie::StopAllCutScenes(IFunctionHandler *pH)
Movie::PauseSequences(IFunctionHandler *pH)
Movie::ResumeSequences(IFunctionHandler *pH)
Particle::CreateEffect(IFunctionHandler *pH, const char *name, SmartScriptTable params)
Particle::DeleteEffect(IFunctionHandler *pH, const char *name)
Particle::IsEffectAvailable(IFunctionHandler *pH, const char *name)
Particle::SpawnEffect(IFunctionHandler *pH, const char *effectName, Vec3 pos, Vec3 dir)
Particle::SpawnEffectLine(IFunctionHandler *pH, const char *effectName, Vec3 startPos, Vec3 endPos, Vec3 dir, float scale, int slices)
Particle::SpawnParticles(IFunctionHandler *pH, SmartScriptTable params, Vec3 pos, Vec3 dir)
Particle::CreateDecal(IFunctionHandler *pH, Vec3 pos, Vec3 normal, float size, float lifeTime, const char *textureName)
Particle::CreateMatDecal(IFunctionHandler *pH, Vec3 pos, Vec3 normal, float size, float lifeTime, const char *materialName)
Particle::Attach(IFunctionHandler * pH)
Particle::Detach(IFunctionHandler * pH)
Physics::SimulateExplosion(IFunctionHandler *pH,SmartScriptTable explisionTable)
Physics::RegisterExplosionCrack(IFunctionHandler *pH,const char *sGeometryFile,int nIdMaterial )
Physics::RayWorldIntersection(IFunctionHandler *pH)
Physics::RayTraceCheck(IFunctionHandler *pH,Vec3 src,Vec3 dst,ScriptHandle skipEntityId1,ScriptHandle skipEntityId2 )
Physics::SamplePhysEnvironment(IFunctionHandler *pH)
Script::ReloadScripts(IFunctionHandler *pH)
Script::ReloadScript(IFunctionHandler *pH)
Script::ReloadEntityScript(IFunctionHandler *pH, const char *className)
Script::LoadScript(IFunctionHandler *pH)
Script::LoadScriptFolder(IFunctionHandler *pH)
Script::UnloadScript(IFunctionHandler *pH)
Script::DumpLoadedScripts(IFunctionHandler *pH)
Script::SetTimer(IFunctionHandler *pH,int nMilliseconds,HSCRIPTFUNCTION hFunc )
Script::SetTimerForFunction(IFunctionHandler *pH,int nMilliseconds,const char *sFunctionName )
Script::KillTimer(IFunctionHandler *pH,ScriptHandle nTimerId )
Sound::GetAudioTriggerID(IFunctionHandler* pH, char const* const sTriggerName)
Sound::GetAudioSwitchID(IFunctionHandler* pH, char const* const sSwitchName)
Sound::GetAudioSwitchStateID(IFunctionHandler* pH, ScriptHandle const hSwitchID, char const* const sSwitchStateName)
Sound::GetAudioRtpcID(IFunctionHandler* pH, char const* const sRtpcName)
Sound::GetAudioEnvironmentID(IFunctionHandler* pH, char const* const sEnvironmentName)
Sound::SetAudioRtpcValue(IFunctionHandler* pH, ScriptHandle const hRtpcID, float const fValue)
System::ShowDebugger(IFunctionHandler *pH)
System::DumpMemStats (IFunctionHandler *pH)
System::DumpMemoryCoverage(IFunctionHandler *pH)
System::ApplicationTest(IFunctionHandler *pH)
System::QuitInNSeconds(IFunctionHandler *pH)
System::DumpWinHeaps (IFunctionHandler *pH)
System::CreateDownload(IFunctionHandler *pH)
System::LoadFont(IFunctionHandler *pH)
System::ExecuteCommand(IFunctionHandler *pH)
System::LogToConsole(IFunctionHandler *pH)
System::LogAlways(IFunctionHandler *pH)
System::Warning(IFunctionHandler *pH)
System::Error(IFunctionHandler *pH)
System::IsEditor(IFunctionHandler *pH)
System::IsEditing(IFunctionHandler *pH)
System::ClearConsole(IFunctionHandler *pH)
System::Log(IFunctionHandler *pH)
System::SetConsoleImage(IFunctionHandler *pH)
System::GetCurrTime(IFunctionHandler *pH)
System::GetCurrAsyncTime(IFunctionHandler *pH)
System::GetFrameTime(IFunctionHandler *pH)
System::GetLocalOSTime(IFunctionHandler *pH)
System::GetUserName(IFunctionHandler *pH)
System::ShowConsole(IFunctionHandler *pH)
System::CheckHeapValid(IFunctionHandler *pH)
System::GetConfigSpec(IFunctionHandler *pH)
System::IsMultiplayer(IFunctionHandler *pH)
System::GetEntity(IFunctionHandler *pH)
System::GetEntityClass(IFunctionHandler *pH)
System::PrepareEntityFromPool(IFunctionHandler *pH)
System::ReturnEntityToPool(IFunctionHandler *pH)
System::ResetPoolEntity(IFunctionHandler *pH)
System::GetEntities(IFunctionHandler *pH)
System::GetEntitiesByClass(IFunctionHandler *pH, const char* EntityClass)
System::GetEntitiesInSphere(IFunctionHandler *pH, Vec3 center, float radius)
System::GetEntitiesInSphereByClass(IFunctionHandler *pH, Vec3 center, float radius, const char* EntityClass)
System::ScanDirectory(IFunctionHandler *pH)
System::DrawLabel(IFunctionHandler *pH)
System::GetPhysicalEntitiesInBox(IFunctionHandler *pH, Vec3 center, float radius)
System::GetPhysicalEntitiesInBoxByClass(IFunctionHandler *pH, Vec3 center, float radius, const char* className)
System::GetNearestEntityByClass(IFunctionHandler *pH, Vec3 center, float radius, const char* className)
System::GetEntityByName(IFunctionHandler *pH, const char* sEntityName)
System::GetEntityIdByName(IFunctionHandler *pH,const char* sEntityName)
System::DeformTerrainInternal(IFunctionHandler *pH, bool nameIsMaterial)
System::DeformTerrain(IFunctionHandler *pH)
System::DeformTerrainUsingMat(IFunctionHandler *pH)
System::ScreenToTexture(IFunctionHandler *pH)
System::DrawLine(IFunctionHandler *pH)
System::Draw2DLine(IFunctionHandler *pH)
System::DrawText(IFunctionHandler *pH)
System::SetPostProcessFxParam(IFunctionHandler *pH)
System::GetPostProcessFxParam(IFunctionHandler *pH)
System::SetScreenFx(IFunctionHandler *pH)
System::GetScreenFx(IFunctionHandler *pH)
System::SetCVar(IFunctionHandler *pH)
System::GetCVar(IFunctionHandler *pH)
System::AddCCommand(IFunctionHandler *pH)
System::RemoveCCommand(IFunctionHandler *pH)
System::AddKeyBind(IFunctionHandler *pH)
System::SetScissor(IFunctionHandler *pH)
System::ActivateLight(IFunctionHandler *pH)
System::ActivateMainLight(IFunctionHandler *pH)
System::SetSkyBox(IFunctionHandler *pH)
System::IsValidMapPos(IFunctionHandler *pH)
System::EnableMainView(IFunctionHandler *pH)
System::DebugStats(IFunctionHandler *pH)
System::ViewDistanceSet(IFunctionHandler *pH)
System::ViewDistanceGet(IFunctionHandler *pH)
System::SetSunColor(IFunctionHandler *pH, Vec3 vColor)
System::GetSunColor(IFunctionHandler *pH)
System::SetSkyColor(IFunctionHandler *pH, Vec3 vColor)
System::GetSkyColor(IFunctionHandler *pH)
System::SetSkyHighlight(IFunctionHandler *pH, SmartScriptTable tbl)
System::GetSkyHighlight(IFunctionHandler *pH, SmartScriptTable params)
System::ApplyForceToEnvironment(IFunctionHandler * pH)
System::GetOutdoorAmbientColor(IFunctionHandler *pH)
System::SetOutdoorAmbientColor(IFunctionHandler *pH)
System::GetTerrainElevation(IFunctionHandler *pH)
System::SetIndoorColor(IFunctionHandler *pH)
System::ActivatePortal(IFunctionHandler *pH)
System::DumpMMStats(IFunctionHandler *pH)
System::EnumDisplayFormats(IFunctionHandler *pH)
System::EnumAAFormats(IFunctionHandler *pH)
System::IsPointIndoors(IFunctionHandler *pH)
System::SetGammaDelta(IFunctionHandler *pH)
System::ProjectToScreen(IFunctionHandler *pH, Vec3 vec)
System::EnableHeatVision(IFunctionHandler *pH)
System::IndoorSoundAllowed(IFunctionHandler * pH)
System::EnableOceanRendering(IFunctionHandler *pH)
System::Break(IFunctionHandler *pH)
System::SetWaterVolumeOffset(IFunctionHandler *pH)
System::SetViewCameraFov(IFunctionHandler *pH, float fov)
System::GetViewCameraFov(IFunctionHandler *pH)
System::IsPointVisible(IFunctionHandler *pH, Vec3 point)
System::GetViewCameraPos(IFunctionHandler *pH)
System::GetViewCameraDir(IFunctionHandler *pH)
System::GetViewCameraUpDir(IFunctionHandler *pH)
System::GetViewCameraAngles(IFunctionHandler *pH)
System::RayWorldIntersection(IFunctionHandler *pH)
System::RayTraceCheck(IFunctionHandler *pH)
System::IsPS20Supported(IFunctionHandler* pH)
System::IsHDRSupported(IFunctionHandler* pH)
System::SetBudget(IFunctionHandler* pH)
System::SetVolumetricFogModifiers(IFunctionHandler* pH)
System::SetWind(IFunctionHandler *pH)
System::GetWind(IFunctionHandler *pH)
System::GetSurfaceTypeIdByName(IFunctionHandler *pH, const char* surfaceName)
System::GetSurfaceTypeNameById(IFunctionHandler *pH, int surfaceId)
System::RemoveEntity(IFunctionHandler *pH, ScriptHandle entityId)
System::SpawnEntity(IFunctionHandler *pH, SmartScriptTable params)
System::IsDevModeEnable(IFunctionHandler* pH)
System::SaveConfiguration(IFunctionHandler* pH)
System::BrowseURL(IFunctionHandler *pH)
System::GetSystemMem(IFunctionHandler* pH)
System::Quit(IFunctionHandler* pH)
System::ClearKeyState(IFunctionHandler* pH)
System::LoadLocalizationXml(IFunctionHandler *pH, const char* filename)
System::GetFrameID(IFunctionHandler *pH)
Kythera::Generate(IFunctionHandler *pH)
Kythera::RegisterEntity(IFunctionHandler *pH)
Kythera::RegisterReferenceEntity(IFunctionHandler *pH)
Kythera::RegisterGroupEntity(IFunctionHandler *pH)
Kythera::UnregisterEntity(IFunctionHandler *pH)
Kythera::AddGroundNavigation(IFunctionHandler *pH)
Kythera::MakeGroundObstacle(IFunctionHandler *pH)
Kythera::UnregisterAsObstacle(IFunctionHandler *pH)
Kythera::Make3DObstacle(IFunctionHandler *pH)
Kythera::AddTag(IFunctionHandler *pH)
