AI: SCRIPT_REG_FUNC(Warning);
AI: SCRIPT_REG_FUNC(Error);
AI: SCRIPT_REG_FUNC(LogProgress);
AI: SCRIPT_REG_FUNC(LogEvent);
AI: SCRIPT_REG_FUNC(LogComment);
AI: SCRIPT_REG_FUNC(RecComment);
AI: SCRIPT_REG_FUNC(ResetParameters);
AI: SCRIPT_REG_FUNC(ChangeParameter);
AI: SCRIPT_REG_FUNC(GetParameter);
AI: SCRIPT_REG_FUNC(IsEnabled);
AI: SCRIPT_REG_FUNC(ChangeMovementAbility);
AI: SCRIPT_REG_FUNC(ExecuteAction);
AI: SCRIPT_REG_FUNC(AbortAction);
AI: SCRIPT_REG_FUNC(SetSmartObjectState);
AI: SCRIPT_REG_FUNC(ModifySmartObjectStates);
AI: SCRIPT_REG_FUNC(SmartObjectEvent);
AI: SCRIPT_REG_FUNC(GetLastUsedSmartObject);
AI: SCRIPT_REG_FUNC(CreateGoalPipe);
AI: SCRIPT_REG_FUNC(BeginGoalPipe);
AI: SCRIPT_REG_FUNC(EndGoalPipe);
AI: SCRIPT_REG_FUNC(BeginGroup);
AI: SCRIPT_REG_FUNC(EndGroup);
AI: SCRIPT_REG_FUNC(PushGoal);
AI: SCRIPT_REG_FUNC(PushLabel);
AI: SCRIPT_REG_FUNC(IsGoalPipe);
AI: SCRIPT_REG_FUNC(Signal);
AI: SCRIPT_REG_TEMPLFUNC(NotifyGroup, "groupID, senderID, notification");
AI: SCRIPT_REG_FUNC(FreeSignal);
AI: SCRIPT_REG_FUNC(SetIgnorant);
AI: SCRIPT_REG_TEMPLFUNC(BreakEvent, "entityID, pos, radius");
AI: SCRIPT_REG_TEMPLFUNC(AddCoverEntity, "entityID");
AI: SCRIPT_REG_TEMPLFUNC(RemoveCoverEntity, "entityID");
AI: SCRIPT_REG_FUNC(SetAssesmentMultiplier);
AI: SCRIPT_REG_FUNC(SetFactionThreatMultiplier);
AI: SCRIPT_REG_FUNC(GetGroupCount);
AI: SCRIPT_REG_FUNC(GetGroupMember);
AI: SCRIPT_REG_FUNC(GetGroupOf);
AI: SCRIPT_REG_FUNC(GetGroupAveragePosition);
AI: SCRIPT_REG_FUNC(Hostile);
AI: SCRIPT_REG_FUNC(FindObjectOfType);
AI: SCRIPT_REG_FUNC(SoundEvent);
AI: SCRIPT_REG_FUNC(VisualEvent);
AI: SCRIPT_REG_FUNC(GetSoundPerceptionDescriptor);
AI: SCRIPT_REG_FUNC(SetSoundPerceptionDescriptor);
AI: SCRIPT_REG_FUNC(GetAnchor);
AI: SCRIPT_REG_TEMPLFUNC(GetFactionOf, "entityID");
AI: SCRIPT_REG_TEMPLFUNC(SetFactionOf, "entityID, factionName");
AI: SCRIPT_REG_FUNC(GetReactionOf);
AI: SCRIPT_REG_TEMPLFUNC(SetReactionOf, "factionOne, factionTwo, reaction");
AI: SCRIPT_REG_FUNC(GetTypeOf);
AI: SCRIPT_REG_FUNC(GetSubTypeOf);
AI: SCRIPT_REG_FUNC(GetAttentionTargetAIType);
AI: SCRIPT_REG_FUNC(GetAttentionTargetOf);
AI: SCRIPT_REG_FUNC(GetAttentionTargetPosition);
AI: SCRIPT_REG_FUNC(GetAttentionTargetDirection);
AI: SCRIPT_REG_FUNC(GetAttentionTargetViewDirection);
AI: SCRIPT_REG_FUNC(GetAttentionTargetDistance);
AI: SCRIPT_REG_TEMPLFUNC(GetAttentionTargetEntity, "entityID");
AI: SCRIPT_REG_FUNC(GetAttentionTargetType);
AI: SCRIPT_REG_TEMPLFUNC(GetAttentionTargetThreat, "entityID");
AI: SCRIPT_REG_FUNC(GetTargetType);
AI: SCRIPT_REG_FUNC(GetTargetSubType);
AI: SCRIPT_REG_FUNC(GetAIObjectPosition);
AI: SCRIPT_REG_FUNC(GetBeaconPosition);
AI: SCRIPT_REG_FUNC(SetBeaconPosition);
AI: SCRIPT_REG_FUNC(GetTotalLengthOfPath);
AI: SCRIPT_REG_FUNC(GetNearestEntitiesOfType);
AI: SCRIPT_REG_FUNC(SetRefPointPosition);
AI: SCRIPT_REG_FUNC(SetRefPointDirection);
AI: SCRIPT_REG_FUNC(GetRefPointPosition);
AI: SCRIPT_REG_FUNC(GetRefPointDirection);
AI: SCRIPT_REG_FUNC(SetRefPointRadius);
AI: SCRIPT_REG_FUNC(SetRefShapeName);
AI: SCRIPT_REG_FUNC(GetRefShapeName);
AI: SCRIPT_REG_FUNC(SetVehicleStickTarget);
AI: SCRIPT_REG_FUNC(SetTerritoryShapeName);
AI: SCRIPT_REG_FUNC(CreateTempGenericShapeBox);
AI: SCRIPT_REG_FUNC(GetForwardDir);
AI: SCRIPT_REG_FUNC(SetCharacter);
AI: SCRIPT_REG_FUNC(GetDirectAnchorPos);
AI: SCRIPT_REG_FUNC(GetNearestHidespot);
AI: SCRIPT_REG_FUNC(GetEnclosingGenericShapeOfType);
AI: SCRIPT_REG_FUNC(IsPointInsideGenericShape);
AI: SCRIPT_REG_FUNC(DistanceToGenericShape);
AI: SCRIPT_REG_FUNC(ConstrainPointInsideGenericShape);
AI: SCRIPT_REG_FUNC(InvalidateHidespot);
AI: SCRIPT_REG_FUNC(EvalHidespot);
AI: SCRIPT_REG_FUNC(EvalPeek);
AI: SCRIPT_REG_TEMPLFUNC(AddPersonallyHostile, "entityID, hostileID");
AI: SCRIPT_REG_TEMPLFUNC(RemovePersonallyHostile, "entityID, hostileID");
AI: SCRIPT_REG_TEMPLFUNC(ResetPersonallyHostiles, "entityID, hostileID");
AI: SCRIPT_REG_TEMPLFUNC(IsPersonallyHostile, "entityID, hostileID");
AI: SCRIPT_REG_FUNC(NotifyReinfDone);
AI: SCRIPT_REG_FUNC(BehaviorEvent);
AI: SCRIPT_REG_FUNC(IntersectsForbidden);
AI: SCRIPT_REG_FUNC(IsPointInFlightRegion);
AI: SCRIPT_REG_FUNC(IsPointInWaterRegion);
AI: SCRIPT_REG_FUNC(GetEnclosingSpace);
AI: SCRIPT_REG_FUNC(Event);
AI: SCRIPT_REG_FUNC(CreateFormation);
AI: SCRIPT_REG_FUNC(AddFormationPoint);
AI: SCRIPT_REG_FUNC(AddFormationPointFixed);
AI: SCRIPT_REG_FUNC(GetFormationPointClass);
AI: SCRIPT_REG_FUNC(GetFormationPointPosition);
AI: SCRIPT_REG_FUNC(ChangeFormation);
AI: SCRIPT_REG_FUNC(ScaleFormation);
AI: SCRIPT_REG_FUNC(SetFormationUpdate);
AI: SCRIPT_REG_FUNC(SetFormationUpdateSight);
AI: SCRIPT_REG_FUNC(GetLeader);
AI: SCRIPT_REG_FUNC(SetLeader);
AI: SCRIPT_REG_FUNC(UpTargetPriority);
AI: SCRIPT_REG_FUNC(DropTarget);
AI: SCRIPT_REG_FUNC(ClearPotentialTargets);
AI: SCRIPT_REG_FUNC(SetTempTargetPriority);
AI: SCRIPT_REG_FUNC(AddAggressiveTarget);
AI: SCRIPT_REG_FUNC(UpdateTempTarget);
AI: SCRIPT_REG_FUNC(ClearTempTarget);
AI: SCRIPT_REG_FUNC(SetExtraPriority);
AI: SCRIPT_REG_FUNC(GetExtraPriority);
AI: SCRIPT_REG_FUNC(RegisterTargetTrack);
AI: SCRIPT_REG_FUNC(UnregisterTargetTrack); 
AI: SCRIPT_REG_FUNC(SetTargetTrackClassThreat);
AI: SCRIPT_REG_TEMPLFUNC(TriggerCurrentTargetTrackPulse, "entityID, stimulusName, pulseName");
AI: SCRIPT_REG_TEMPLFUNC(CreateStimulusEvent, "ownerId, targetID, stimulusName, pData");
AI: SCRIPT_REG_TEMPLFUNC(CreateStimulusEventInRange, "targetID, stimulusName, dataScriptTable");
AI: SCRIPT_REG_FUNC(GetStance);
AI: SCRIPT_REG_FUNC(SetStance);
AI: SCRIPT_REG_FUNC(SetUnitProperties);
AI: SCRIPT_REG_FUNC(GetUnitCount);
AI: SCRIPT_REG_FUNC(SetForcedNavigation);
AI: SCRIPT_REG_FUNC(SetAdjustPath);
AI: SCRIPT_REG_FUNC(GetHeliAdvancePoint);
AI: SCRIPT_REG_FUNC(CheckVehicleColision);
AI: SCRIPT_REG_FUNC(GetFlyingVehicleFlockingPos);
AI: SCRIPT_REG_FUNC(SetPFBlockerRadius);
AI: SCRIPT_REG_FUNC(AssignPFPropertiesToPathType);
AI: SCRIPT_REG_FUNC(AssignPathTypeToSOUser);
AI: SCRIPT_REG_FUNC(SetPFProperties);
AI: SCRIPT_REG_FUNC(GetGroupTarget);
AI: SCRIPT_REG_TEMPLFUNC(GetGroupTargetType, "groupID");
AI: SCRIPT_REG_TEMPLFUNC(GetGroupTargetThreat, "groupID");
AI: SCRIPT_REG_TEMPLFUNC(GetGroupTargetEntity, "groupID");
AI: SCRIPT_REG_TEMPLFUNC(GetGroupScriptTable, "groupID");
AI: SCRIPT_REG_FUNC(GetGroupTargetCount);
AI: SCRIPT_REG_FUNC(GetNavigationType);
AI: SCRIPT_REG_FUNC(SetPathToFollow);
AI: SCRIPT_REG_FUNC(SetPathAttributeToFollow);
AI: SCRIPT_REG_FUNC(GetPredictedPosAlongPath);
AI: SCRIPT_REG_FUNC(SetPointListToFollow);
AI: SCRIPT_REG_FUNC(GetNearestPointOnPath);
AI: SCRIPT_REG_FUNC(GetPathSegNoOnPath);
AI: SCRIPT_REG_FUNC(GetPointOnPathBySegNo);
AI: SCRIPT_REG_FUNC(GetPathLoop);
AI: SCRIPT_REG_FUNC(GetNearestPathOfTypeInRange);
AI: SCRIPT_REG_FUNC(GetAlertness);
AI: SCRIPT_REG_FUNC(GetGroupAlertness);
AI: SCRIPT_REG_FUNC(GetDistanceAlongPath);
AI: SCRIPT_REG_FUNC(SetFireMode);
AI: SCRIPT_REG_FUNC(SetMemoryFireType);
AI: SCRIPT_REG_FUNC(GetMemoryFireType);
AI: SCRIPT_REG_FUNC(ThrowGrenade);
AI: SCRIPT_REG_FUNC(EnableCoverFire);
AI: SCRIPT_REG_FUNC(EnableFire);
AI: SCRIPT_REG_FUNC(IsFireEnabled);
AI: SCRIPT_REG_FUNC(CanFireInStance);
AI: SCRIPT_REG_FUNC(SetUseSecondaryVehicleWeapon);
AI: SCRIPT_REG_FUNC(SetRefPointToGrenadeAvoidTarget);
AI: SCRIPT_REG_FUNC(IsAgentInTargetFOV);
AI: SCRIPT_REG_FUNC(AgentLookAtPos);
AI: SCRIPT_REG_FUNC(ResetAgentLookAtPos);
AI: SCRIPT_REG_FUNC(IsAgentInAgentFOV);
AI: SCRIPT_REG_FUNC(CreateGroupFormation);
AI: SCRIPT_REG_FUNC(SetFormationPosition);
AI: SCRIPT_REG_FUNC(SetFormationLookingPoint);
AI: SCRIPT_REG_FUNC(GetFormationPosition);
AI: SCRIPT_REG_FUNC(GetFormationLookingPoint);
AI: SCRIPT_REG_FUNC(SetFormationAngleThreshold);
AI: SCRIPT_REG_TEMPLFUNC(SetMovementContext, "entityId, context");
AI: SCRIPT_REG_TEMPLFUNC(ClearMovementContext, "entityId, context");
AI: SCRIPT_REG_TEMPLFUNC(SetPostures, "entityId, postures");
AI: SCRIPT_REG_TEMPLFUNC(SetPosturePriority, "entityId, postureName, priority");
AI: SCRIPT_REG_TEMPLFUNC(GetPosturePriority, "entityId, postureName");
AI: SCRIPT_REG_FUNC(AddCombatClass);
AI: SCRIPT_REG_FUNC(SetRefPointAtDefensePos);
AI: SCRIPT_REG_FUNC(RegisterDamageRegion);
AI: SCRIPT_REG_FUNC(IgnoreCurrentHideObject);
AI: SCRIPT_REG_FUNC(GetCurrentHideAnchor);
AI: SCRIPT_REG_FUNC(GetBiasedDirection);
AI: SCRIPT_REG_FUNC(FindStandbySpotInShape);
AI: SCRIPT_REG_FUNC(FindStandbySpotInSphere);
AI: SCRIPT_REG_FUNC(GetObjectRadius);
AI: SCRIPT_REG_FUNC(GetProbableTargetPosition);
AI: SCRIPT_REG_FUNC(NotifySurpriseEntityAction);
AI: SCRIPT_REG_FUNC(Animation);
AI: SCRIPT_REG_TEMPLFUNC(SetAnimationTag, "entityID, tagName");
AI: SCRIPT_REG_TEMPLFUNC(ClearAnimationTag, "entityID, tagName");
AI: SCRIPT_REG_FUNC(SetRefpointToAnchor);
AI: SCRIPT_REG_FUNC(SetRefpointToPunchableObject);
AI: SCRIPT_REG_FUNC(MeleePunchableObject);
AI: SCRIPT_REG_FUNC(IsPunchableObjectValid);
AI: SCRIPT_REG_FUNC(ProcessBalancedDamage);
AI: SCRIPT_REG_FUNC(CanMoveStraightToPoint);
AI: SCRIPT_REG_FUNC(CanMelee);
AI: SCRIPT_REG_FUNC(CheckMeleeDamage);
AI: SCRIPT_REG_FUNC(IsMoving);
AI: SCRIPT_REG_FUNC(GetDirLabelToPoint);
AI: SCRIPT_REG_FUNC(SetAttentiontarget);
AI: SCRIPT_REG_FUNC(DebugReportHitDamage);
AI: SCRIPT_REG_TEMPLFUNC(RegisterInterestingEntity, "entityId, radius, baseInterest, category, aiAction");
AI: SCRIPT_REG_TEMPLFUNC(UnregisterInterestingEntity, "entityId");
AI: SCRIPT_REG_TEMPLFUNC(RegisterInterestedActor, "entityId, fInterestFilter, fAngleInDegrees");
AI: SCRIPT_REG_TEMPLFUNC(UnregisterInterestedActor, "entityId");
AI: SCRIPT_REG_FUNC(RegisterTacticalPointQuery);
AI: SCRIPT_REG_FUNC(GetTacticalPoints);
AI: SCRIPT_REG_FUNC(DestroyAllTPSQueries);
AI: SCRIPT_REG_FUNC(GetObjectBlackBoard);
AI: SCRIPT_REG_FUNC(GetBehaviorBlackBoard);
AI: SCRIPT_REG_FUNC(IsCoverCompromised);
AI: SCRIPT_REG_FUNC(SetCoverCompromised);
AI: SCRIPT_REG_FUNC(IsTakingCover);
AI: SCRIPT_REG_FUNC(IsMovingToCover);
AI: SCRIPT_REG_FUNC(IsMovingInCover);
AI: SCRIPT_REG_FUNC(IsInCover);
AI: SCRIPT_REG_FUNC(SetInCover);
AI: SCRIPT_REG_FUNC(IsOutOfAmmo);
AI: SCRIPT_REG_FUNC(IsLowOnAmmo);
AI: SCRIPT_REG_TEMPLFUNC(ResetAgentState, "entityId, stateLabel");
AI: SCRIPT_REG_TEMPLFUNC(PlayCommunication, "entityId, commName, channelName, contextExpiry, [skipSound], [skipAnimation], [targetId], [target]");
AI: SCRIPT_REG_TEMPLFUNC(StopCommunication, "playID");
AI: SCRIPT_REG_TEMPLFUNC(SetBehaviorVariable, "entityId, variableName, value");
AI: SCRIPT_REG_TEMPLFUNC(GetBehaviorVariable, "entityId, variableName");
AI: SCRIPT_REG_FUNC(SetAlarmed);
AI: SCRIPT_REG_TEMPLFUNC(LoadBehaviors, "folderName, extensions");
AI: SCRIPT_REG_TEMPLFUNC(LoadCharacters, "folderName, table");
AI: SCRIPT_REG_TEMPLFUNC(IsLowHealthPauseActive, "entityID");
AI: SCRIPT_REG_TEMPLFUNC(GetPreviousBehaviorName, "entityID");
AI: SCRIPT_REG_TEMPLFUNC(SetContinuousMotion, "entityID, continuousMotion");
AI: SCRIPT_REG_TEMPLFUNC(GetPeakThreatLevel, "entityID");
AI: SCRIPT_REG_TEMPLFUNC(GetPeakThreatType, "entityID");
AI: SCRIPT_REG_TEMPLFUNC(GetPreviousPeakThreatLevel, "entityID");
AI: SCRIPT_REG_TEMPLFUNC(GetPreviousPeakThreatType, "entityID");
AI: SCRIPT_REG_TEMPLFUNC(CheckForFriendlyAgentsAroundPoint, "entityID, point, radius");
AI: SCRIPT_REG_TEMPLFUNC(EnableUpdateLookTarget, "entityID, bEnable");
AI: SCRIPT_REG_TEMPLFUNC(SetBehaviorTreeEvaluationEnabled, "entityID, enabled");
AI: SCRIPT_REG_TEMPLFUNC(UpdateGlobalPerceptionScale, "visualScale, audioScale, [filterType], [faction]");
AI: SCRIPT_REG_TEMPLFUNC(QueueBubbleMessage, "entityID, message");
AI: SCRIPT_REG_TEMPLFUNC(SequenceBehaviorReady, "entityID");
AI: SCRIPT_REG_TEMPLFUNC(SequenceInterruptibleBehaviorLeft, "entityID");
AI: SCRIPT_REG_TEMPLFUNC(SequenceNonInterruptibleBehaviorLeft, "entityID");
AI: SCRIPT_REG_TEMPLFUNC(SetCollisionAvoidanceRadiusIncrement, "entityID, radius");
AI: SCRIPT_REG_TEMPLFUNC(RequestToStopMovement, "entityID");
AI: SCRIPT_REG_TEMPLFUNC(GetDistanceToClosestGroupMember, "entityID");
AI: SCRIPT_REG_TEMPLFUNC(IsAimReady, "entityID");
AI: SCRIPT_REG_TEMPLFUNC(AllowLowerBodyToTurn, "entityID, allowLowerBodyToTurn");
AI: SCRIPT_REG_TEMPLFUNC(GetGroupScopeUserCount, "entityIdHandle, groupScopeName");
AI: SCRIPT_REG_TEMPLFUNC(StartModularBehaviorTree, "entityIdHandle, treeName");
AI: SCRIPT_REG_TEMPLFUNC(StopModularBehaviorTree, "entityIdHandle");
AI: SCRIPT_REG_FUNC(LoadGoalPipes);
AI: SCRIPT_REG_FUNC(AutoDisable);
AI: SCRIPT_REG_TEMPLFUNC(GetPotentialTargetCountFromFaction, "entityID, factionName");
AI: SCRIPT_REG_TEMPLFUNC(GetPotentialTargetCount, "entityID");
AI: SCRIPT_REG_FUNC(EnableWeaponAccessory);
AI: SCRIPT_REG_FUNC(GoTo);
AI: SCRIPT_REG_FUNC(SetSpeed);
AI: SCRIPT_REG_FUNC(SetEntitySpeedRange);
AI: SCRIPT_REG_TEMPLFUNC(SetLastOpResult, "entityID, targetEntityId");
ActionMapManager: SCRIPT_REG_TEMPLFUNC(EnableActionFilter, "name, enable");
ActionMapManager: SCRIPT_REG_TEMPLFUNC(EnableActionMap, "name, enable");
ActionMapManager: SCRIPT_REG_TEMPLFUNC(EnableActionMapManager, "enable, resetStateOnDisable");
ActionMapManager: SCRIPT_REG_TEMPLFUNC(LoadFromXML, "name");
ActionMapManager: SCRIPT_REG_TEMPLFUNC(InitActionMaps, "path");
ActionMapManager: SCRIPT_REG_TEMPLFUNC(SetDefaultActionEntity, "id, updateAll");
ActionMapManager: SCRIPT_REG_TEMPLFUNC(GetDefaultActionEntity, "");
ActionMapManager: SCRIPT_REG_TEMPLFUNC(LoadControllerLayoutFile, "layoutName");
ActionMapManager: SCRIPT_REG_TEMPLFUNC(IsFilterEnabled, "filterName");
ActorSystem: SCRIPT_REG_TEMPLFUNC(CreateActor, "channelId, actorParams");
DialogSystem: SCRIPT_REG_TEMPLFUNC(CreateSession, "scriptID");
DialogSystem: SCRIPT_REG_TEMPLFUNC(DeleteSession, "sessionID");
DialogSystem: SCRIPT_REG_TEMPLFUNC(SetActor, "sessionID, actorID, entityID");
DialogSystem: SCRIPT_REG_TEMPLFUNC(Play, "sessionID");
DialogSystem: SCRIPT_REG_TEMPLFUNC(Stop, "sessionID");
DialogSystem: SCRIPT_REG_TEMPLFUNC(IsEntityInDialog, "entityID");
UIAction: SCRIPT_REG_TEMPLFUNC(ReloadElement, "elementName, instanceID");
UIAction: SCRIPT_REG_TEMPLFUNC(UnloadElement, "elementName, instanceID");
UIAction: SCRIPT_REG_TEMPLFUNC(ShowElement, "elementName, instanceID");
UIAction: SCRIPT_REG_TEMPLFUNC(HideElement, "elementName, instanceID");
UIAction: SCRIPT_REG_TEMPLFUNC(RequestHide, "elementName, instanceID");
UIAction: SCRIPT_REG_TEMPLFUNC(CallFunction, "elementName, instanceID, functionName");
UIAction: SCRIPT_REG_TEMPLFUNC(SetVariable, "elementName, instanceID, varName");
UIAction: SCRIPT_REG_TEMPLFUNC(GetVariable, "elementName, instanceID, varName");
UIAction: SCRIPT_REG_TEMPLFUNC(SetArray, "elementName, instanceID, arrayName");
UIAction: SCRIPT_REG_TEMPLFUNC(GetArray, "elementName, instanceID, arrayName");
UIAction: SCRIPT_REG_TEMPLFUNC(GotoAndPlay, "elementName, instanceID, mcName, frameNum");
UIAction: SCRIPT_REG_TEMPLFUNC(GotoAndStop, "elementName, instanceID, mcName, frameNum");
UIAction: SCRIPT_REG_TEMPLFUNC(GotoAndPlayFrameName, "elementName, instanceID, mcName, frameName");
UIAction: SCRIPT_REG_TEMPLFUNC(GotoAndStopFrameName, "elementName, instanceID, mcName, frameName");
UIAction: SCRIPT_REG_TEMPLFUNC(SetAlpha, "elementName, instanceID, mcName, fAlpha");
UIAction: SCRIPT_REG_TEMPLFUNC(GetAlpha, "elementName, instanceID, mcName");
UIAction: SCRIPT_REG_TEMPLFUNC(SetVisible, "elementName, instanceID, mcName, bVisible");
UIAction: SCRIPT_REG_TEMPLFUNC(IsVisible, "elementName, instanceID, mcName");
UIAction: SCRIPT_REG_TEMPLFUNC(SetPos, "elementName, instanceID, mcName, vPos");
UIAction: SCRIPT_REG_TEMPLFUNC(GetPos, "elementName, instanceID, mcName");
UIAction: SCRIPT_REG_TEMPLFUNC(SetRotation, "elementName, instanceID, mcName, vRotation");
UIAction: SCRIPT_REG_TEMPLFUNC(GetRotation, "elementName, instanceID, mcName");
UIAction: SCRIPT_REG_TEMPLFUNC(SetScale, "elementName, instanceID, mcName, vScale");
UIAction: SCRIPT_REG_TEMPLFUNC(GetScale, "elementName, instanceID, mcName");
UIAction: SCRIPT_REG_TEMPLFUNC(StartAction, "actionName");
UIAction: SCRIPT_REG_TEMPLFUNC(EndAction, "actionName, disable");
UIAction: SCRIPT_REG_TEMPLFUNC(EnableAction, "actionName");
UIAction: SCRIPT_REG_TEMPLFUNC(DisableAction, "actionName");
UIAction: SCRIPT_REG_TEMPLFUNC(RegisterElementListener, "scripttable, elementName, instanceID, eventName, callback");
UIAction: SCRIPT_REG_TEMPLFUNC(RegisterActionListener, "scripttable, actionName, eventName, callback");
UIAction: SCRIPT_REG_TEMPLFUNC(RegisterEventSystemListener, "scripttable, eventSystem, eventName, callback");
UIAction: SCRIPT_REG_TEMPLFUNC(UnregisterElementListener, "scripttable, callback");
UIAction: SCRIPT_REG_TEMPLFUNC(UnregisterActionListener, "scripttable, callback");
UIAction: SCRIPT_REG_TEMPLFUNC(UnregisterEventSystemListener, "scripttable, callback");
UIAction: SCRIPT_REG_TEMPLFUNC(GetScreenPosFromWorld, "elementName, instanceID, vPos, vOffset, bScaleMode");
GameToken.h: SCRIPT_REG_FUNC(SetToken);
GameToken.h: SCRIPT_REG_TEMPLFUNC(GetToken, "sTokenName");
GameToken.h: SCRIPT_REG_FUNC(DumpAllTokens);
Inventory: SCRIPT_REG_TEMPLFUNC(Destroy, "");
Inventory: SCRIPT_REG_TEMPLFUNC(Clear, "");
Inventory: SCRIPT_REG_TEMPLFUNC(Dump, "");
Inventory: SCRIPT_REG_TEMPLFUNC(GetItemByClass, "className");
Inventory: SCRIPT_REG_TEMPLFUNC(GetGrenadeWeaponByClass, "className");
Inventory: SCRIPT_REG_TEMPLFUNC(HasAccessory,"accessoryName");
Inventory: SCRIPT_REG_TEMPLFUNC(GetCurrentItemId, "");
Inventory: SCRIPT_REG_TEMPLFUNC(GetCurrentItem, "");
ItemSystem: SCRIPT_REG_TEMPLFUNC(Reset, "");
ItemSystem: SCRIPT_REG_TEMPLFUNC(GiveItem, "actorId, itemName");
ItemSystem: SCRIPT_REG_TEMPLFUNC(SetActorItem, "actorId, itemId, keepHistory");
ItemSystem: SCRIPT_REG_TEMPLFUNC(SetActorItemByName, "actorId, name, keepHistory");
ItemSystem: SCRIPT_REG_TEMPLFUNC(GiveItemPack, "actorId, packName, [keepOld]");
ItemSystem: SCRIPT_REG_TEMPLFUNC(GetPackPrimaryItem, "packName");
ItemSystem: SCRIPT_REG_TEMPLFUNC(GetPackNumItems, "packName");
ItemSystem: SCRIPT_REG_TEMPLFUNC(GetPackItemByIndex, "packName, index");
ItemSystem: SCRIPT_REG_TEMPLFUNC(SerializePlayerLTLInfo, "reading");
MaterialEffects: SCRIPT_REG_TEMPLFUNC(GetEffectId, "customName, surfaceIndex2");
MaterialEffects: SCRIPT_REG_TEMPLFUNC(GetEffectIdByLibName,"LibName, FGFXName");
MaterialEffects: SCRIPT_REG_TEMPLFUNC(PrintEffectIdByMatIndex,"MatName1, MatName2");
MaterialEffects: SCRIPT_REG_TEMPLFUNC(ExecuteEffect, "effectId, paramsTable"); 
Network: SCRIPT_REG_FUNC(Expose);
Network: SCRIPT_REG_TEMPLFUNC(DelegateAuthority, "entity, channel");
GameStatistics: SCRIPT_REG_TEMPLFUNC(PushGameScope, "scopeID");
GameStatistics: SCRIPT_REG_TEMPLFUNC(PopGameScope, "");
GameStatistics: SCRIPT_REG_TEMPLFUNC(AddGameElement, "");
GameStatistics: SCRIPT_REG_TEMPLFUNC(CurrentScope, "");
GameStatistics: SCRIPT_REG_TEMPLFUNC(RemoveGameElement, "");
GameStatistics: SCRIPT_REG_TEMPLFUNC(Event,"event, params");
GameStatistics: SCRIPT_REG_TEMPLFUNC(StateValue,"state, value");
Vehicle: SCRIPT_REG_TEMPLFUNC(IsInsideRadius, "pos, radius");
Vehicle: SCRIPT_REG_TEMPLFUNC(MultiplyWithWorldTM, "pos");  
Vehicle: SCRIPT_REG_TEMPLFUNC(AddSeat, "params");
Vehicle: SCRIPT_REG_TEMPLFUNC(HasHelper, "name");
Vehicle: SCRIPT_REG_TEMPLFUNC(GetHelperPos, "name, isVehicleSpace");
Vehicle: SCRIPT_REG_TEMPLFUNC(GetHelperDir, "name, isVehicleSpace");
Vehicle: SCRIPT_REG_TEMPLFUNC(GetHelperWorldPos, "name");
Vehicle: SCRIPT_REG_TEMPLFUNC(EnableMovement, "enable");
Vehicle: SCRIPT_REG_TEMPLFUNC(DisableEngine, "disable");
Vehicle: SCRIPT_REG_TEMPLFUNC(OnHit, "targetId, shooterId, damage, position, radius, hitTypeId, explosion");
Vehicle: SCRIPT_REG_TEMPLFUNC(ProcessPassengerDamage, "passengerHandle, actorHealth, damage, pDamageClass, explosion");
Vehicle: SCRIPT_REG_TEMPLFUNC(Destroy, "");
Vehicle: SCRIPT_REG_TEMPLFUNC(IsDestroyed, "");
Vehicle: SCRIPT_REG_TEMPLFUNC(IsUsable, "userId");
Vehicle: SCRIPT_REG_TEMPLFUNC(OnUsed, "userId, index");
Vehicle: SCRIPT_REG_TEMPLFUNC(EnterVehicle, "actorId, seatIndex, isAnimationEnabled");
Vehicle: SCRIPT_REG_TEMPLFUNC(ChangeSeat, "actorId, seatIndex, isAnimationEnabled");
Vehicle: SCRIPT_REG_TEMPLFUNC(ExitVehicle, "actorId");
Vehicle: SCRIPT_REG_TEMPLFUNC(GetComponentDamageRatio, "componentName");
Vehicle: SCRIPT_REG_TEMPLFUNC(OnSpawnComplete, "");
Vehicle: SCRIPT_REG_TEMPLFUNC(GetSeatForPassenger, "passengerId");
Vehicle: SCRIPT_REG_TEMPLFUNC(SetHealth, "componentName");
Vehicle: SCRIPT_REG_TEMPLFUNC(ReadOrRestoreJSON, "restore, json");
VehicleSeat: SCRIPT_REG_TEMPLFUNC(Reset, "");
VehicleSeat: SCRIPT_REG_TEMPLFUNC(IsFree, "actor");
VehicleSeat: SCRIPT_REG_TEMPLFUNC(IsDriver, "");
VehicleSeat: SCRIPT_REG_TEMPLFUNC(IsGunner, "");
VehicleSeat: SCRIPT_REG_TEMPLFUNC(GetWeaponCount, "");
VehicleSeat: SCRIPT_REG_TEMPLFUNC(GetWeaponId, "index");
VehicleSeat: SCRIPT_REG_TEMPLFUNC(SetAIWeapon, "weaponId");
VehicleSeat: SCRIPT_REG_TEMPLFUNC(GetPassengerId, "");
VehicleSystem: SCRIPT_REG_FUNC(GetVehicleImplementations);
VehicleSystem: SCRIPT_REG_TEMPLFUNC(GetOptionalScript, "vehicleName");
VehicleSystem: SCRIPT_REG_TEMPLFUNC(ReloadSystem, "");
Action: SCRIPT_REG_TEMPLFUNC(LoadXML, "definitionFile, dataFile");
Action: SCRIPT_REG_TEMPLFUNC(SaveXML, "definitionFile, dataFile, dataTable");
Action: SCRIPT_REG_TEMPLFUNC(IsServer, "");
Action: SCRIPT_REG_TEMPLFUNC(IsDedicatedServer, ""); 
Action: SCRIPT_REG_TEMPLFUNC(IsClient, "");
Action: SCRIPT_REG_TEMPLFUNC(IsGameStarted, "");
Action: SCRIPT_REG_TEMPLFUNC(IsRMIServer, "");
Action: SCRIPT_REG_TEMPLFUNC(IsGameObjectProbablyVisible, "entityId");
Action: SCRIPT_REG_TEMPLFUNC(GetPlayerList, "");
Action: SCRIPT_REG_TEMPLFUNC(ActivateEffect, "name");
Action: SCRIPT_REG_TEMPLFUNC(GetWaterInfo, "pos");
Action: SCRIPT_REG_TEMPLFUNC(GetServer, "number");
Action: SCRIPT_REG_TEMPLFUNC(ConnectToServer, "server");
Action: SCRIPT_REG_TEMPLFUNC(RefreshPings, "");
Action: SCRIPT_REG_TEMPLFUNC(GetServerTime, "");
Action: SCRIPT_REG_TEMPLFUNC(PauseGame, "pause");
Action: SCRIPT_REG_TEMPLFUNC(IsImmersivenessEnabled, "");
Action: SCRIPT_REG_TEMPLFUNC(IsChannelSpecial, "entityId/channelId");
Action: SCRIPT_REG_TEMPLFUNC(ForceGameObjectUpdate, "entityId, force");
Action: SCRIPT_REG_TEMPLFUNC(CreateGameObjectForEntity, "entityId");
Action: SCRIPT_REG_TEMPLFUNC(BindGameObjectToNetwork, "entityId");
Action: SCRIPT_REG_TEMPLFUNC(ActivateExtensionForGameObject, "entityId, extension, activate");
Action: SCRIPT_REG_TEMPLFUNC(SetNetworkParent, "entityId, parentId");
Action: SCRIPT_REG_TEMPLFUNC(IsChannelOnHold, "channelId");
Action: SCRIPT_REG_TEMPLFUNC(BanPlayer, "playerId, message");
Action: SCRIPT_REG_TEMPLFUNC(PersistantSphere, "pos, radius, color, name, timeout");
Action: SCRIPT_REG_TEMPLFUNC(PersistantLine, "start, end, color, name, timeout");
Action: SCRIPT_REG_TEMPLFUNC(PersistantArrow, "pos, radius, color, dir, name, timeout");
Action: SCRIPT_REG_TEMPLFUNC(Persistant2DText, "text, size, color, name, timeout");
Action: SCRIPT_REG_TEMPLFUNC(PersistantEntityTag, "entityId, text");
Action: SCRIPT_REG_TEMPLFUNC(ClearEntityTags, "entityId");
Action: SCRIPT_REG_TEMPLFUNC(ClearStaticTag, "entityId, staticId");
Action: SCRIPT_REG_TEMPLFUNC(SendGameplayEvent, "entityId, event, [desc], [value], [ID|ptr], [str]");
Action: SCRIPT_REG_TEMPLFUNC(CacheItemSound, "itemName");
Action: SCRIPT_REG_TEMPLFUNC(CacheItemGeometry, "itemName");
Action: SCRIPT_REG_TEMPLFUNC(DontSyncPhysics, "entityId");
Action: SCRIPT_REG_TEMPLFUNC(EnableSignalTimer, "entityId, text");
Action: SCRIPT_REG_TEMPLFUNC(DisableSignalTimer, "entityId, text");
Action: SCRIPT_REG_TEMPLFUNC(SetSignalTimerRate, "entityId, text, float, float");
Action: SCRIPT_REG_TEMPLFUNC(ResetSignalTimer, "entityId, text");
Action: SCRIPT_REG_TEMPLFUNC(EnableRangeSignaling, "entityId, bEnable");
Action: SCRIPT_REG_TEMPLFUNC(DestroyRangeSignaling, "entityId");
Action: SCRIPT_REG_TEMPLFUNC(ResetRangeSignaling, "entityId");
Action: SCRIPT_REG_TEMPLFUNC(AddRangeSignal, "entityId, float, float, text");
Action: SCRIPT_REG_TEMPLFUNC(AddTargetRangeSignal, "entityId, targetId, float, float, text");
Action: SCRIPT_REG_TEMPLFUNC(AddAngleSignal, "entityId, float, float, text");
Action: SCRIPT_REG_FUNC(SetViewCamera);
Action: SCRIPT_REG_FUNC(ResetToNormalCamera);
Action: SCRIPT_REG_FUNC(RegisterWithAI);
Action: SCRIPT_REG_TEMPLFUNC(HasAI, "entityId");
Action: SCRIPT_REG_TEMPLFUNC(GetClassName, "classId");
Action: SCRIPT_REG_TEMPLFUNC(SetAimQueryMode, "entityId, mode");
Action: SCRIPT_REG_TEMPLFUNC(PreLoadADB, "adbFileName");
ScriptHelpers.h: #define SCRIPT_REG_FUNC(func) RegisterFunction( #func,functor_ret(*this,SCRIPT_REG_CLASSNAME func) );
ScriptHelpers.h: #define SCRIPT_REG_TEMPLFUNC(func,sFuncParams) RegisterTemplateFunction( #func,sFuncParams,*this,SCRIPT_REG_CLASSNAME func );
Entity: SCRIPT_REG_FUNC(DeleteThis);
Entity: SCRIPT_REG_FUNC(CreateRenderProxy);
Entity: SCRIPT_REG_FUNC(CheckShaderParamCallbacks);
Entity: SCRIPT_REG_TEMPLFUNC(LoadObject,"nSlot,sFilename");
Entity: SCRIPT_REG_TEMPLFUNC(LoadObjectWithFlags,"nSlot,sFilename, nFlags");
Entity: SCRIPT_REG_TEMPLFUNC(LoadObjectLattice,"nSlot");
Entity: SCRIPT_REG_TEMPLFUNC(LoadSubObject,"nSlot,sFilename,sGeomName");
Entity: SCRIPT_REG_TEMPLFUNC(LoadCharacter,"nSlot,sFilename");
Entity: SCRIPT_REG_TEMPLFUNC(LoadGeomCache,"nSlot,sFilename");
Entity: SCRIPT_REG_TEMPLFUNC(LoadLight,"nSlot,tLightDescription");
Entity: SCRIPT_REG_TEMPLFUNC(SetLightColorParams,"nSlot,vDir,nSpecularMultiplier");
Entity: SCRIPT_REG_TEMPLFUNC(UpdateLightClipBounds,"nSlot");
Entity: SCRIPT_REG_TEMPLFUNC(SetSelfAsLightCasterException, "nLightSlot");
Entity: SCRIPT_REG_TEMPLFUNC(LoadCloud,"nSlot,sCloudFilename");
Entity: SCRIPT_REG_TEMPLFUNC(SetCloudMovementProperties, "nSlot,tCloudMovementProperties");
Entity: SCRIPT_REG_TEMPLFUNC(LoadFogVolume,"nSlot,tFogVolumeDescription");
Entity: SCRIPT_REG_TEMPLFUNC(FadeGlobalDensity,"nSlot,fFadeTime,fNewGlobalDensity");
Entity: SCRIPT_REG_TEMPLFUNC(LoadPrismObject, "nSlot");
Entity: SCRIPT_REG_TEMPLFUNC(LoadVolumeObject, "nSlot,sFilename");
Entity: SCRIPT_REG_TEMPLFUNC(SetVolumeObjectMovementProperties, "nSlot,tVolumeObjectMovementProperties");
Entity: SCRIPT_REG_TEMPLFUNC(LoadParticleEffect,"nSlot,sEffectName,bPrime,fPulsePeriod,fScale,fCountScale,sAttachType,sAttachForm");
Entity: SCRIPT_REG_TEMPLFUNC(PreLoadParticleEffect,"sEffectName");
Entity: SCRIPT_REG_TEMPLFUNC(IsSlotParticleEmitter, "slot");
Entity: SCRIPT_REG_TEMPLFUNC(IsSlotLight, "slot");
Entity: SCRIPT_REG_TEMPLFUNC(IsSlotGeometry, "slot");
Entity: SCRIPT_REG_TEMPLFUNC(IsSlotCharacter, "slot");
Entity: SCRIPT_REG_TEMPLFUNC(DeleteParticleEmitter, "slot");
Entity: SCRIPT_REG_TEMPLFUNC(RegisterForAreaEvents, "enable");
Entity: SCRIPT_REG_TEMPLFUNC(RenderAlways, "enable");
Entity: SCRIPT_REG_TEMPLFUNC(SetParentSlot, "child, parent");
Entity: SCRIPT_REG_TEMPLFUNC(GetParentSlot, "child");
Entity: SCRIPT_REG_TEMPLFUNC(GetSlotCount, "");
Entity: SCRIPT_REG_TEMPLFUNC(SetSlotPos,"nSlot,vPos");
Entity: SCRIPT_REG_TEMPLFUNC(SetSlotPosAndDir, "nSlot,vPos,vDir");
Entity: SCRIPT_REG_TEMPLFUNC(GetSlotPos,"nSlot");
Entity: SCRIPT_REG_TEMPLFUNC(SetSlotAngles,"nSlot,vAngles");
Entity: SCRIPT_REG_TEMPLFUNC(GetSlotAngles,"nSlot");
Entity: SCRIPT_REG_TEMPLFUNC(SetSlotScale,"nSlot,fScale");
Entity: SCRIPT_REG_TEMPLFUNC(GetSlotScale,"nSlot");
Entity: SCRIPT_REG_TEMPLFUNC(IsSlotValid, "nSlot");
Entity: SCRIPT_REG_TEMPLFUNC(CopySlotTM,"srcSlot,destSlot,includeTranslation");
Entity: SCRIPT_REG_TEMPLFUNC(MultiplyWithSlotTM,"slot, pos");
Entity: SCRIPT_REG_TEMPLFUNC(SetSlotWorldTM, "slot, pos, dir");
Entity: SCRIPT_REG_TEMPLFUNC(GetSlotWorldPos, "slot");
Entity: SCRIPT_REG_TEMPLFUNC(GetSlotWorldDir, "slot");
Entity: SCRIPT_REG_TEMPLFUNC(SetSlotHud3D, "slot");
Entity: SCRIPT_REG_TEMPLFUNC(GetCharacter,"nSlot");
Entity: SCRIPT_REG_TEMPLFUNC(SetPos,"vPos");
Entity: SCRIPT_REG_TEMPLFUNC(SetAngles,"vAngles");
Entity: SCRIPT_REG_TEMPLFUNC(SetScale,"fScale");
Entity: SCRIPT_REG_TEMPLFUNC(CalcWorldAnglesFromRelativeDir,"vDir");
Entity: SCRIPT_REG_FUNC(GetPos);
Entity: SCRIPT_REG_FUNC(GetAngles);
Entity: SCRIPT_REG_FUNC(GetScale);
Entity: SCRIPT_REG_FUNC(GetCenterOfMassPos);
Entity: SCRIPT_REG_FUNC(GetWorldBoundsCenter);
Entity: SCRIPT_REG_FUNC(GetDistance);
Entity: SCRIPT_REG_FUNC(UpdateAreas);
Entity: SCRIPT_REG_TEMPLFUNC(SetLocalPos,"vPos");
Entity: SCRIPT_REG_TEMPLFUNC(SetLocalAngles,"vAngles");
Entity: SCRIPT_REG_TEMPLFUNC(SetLocalScale,"fScale");
Entity: SCRIPT_REG_FUNC(GetLocalPos);
Entity: SCRIPT_REG_FUNC(GetLocalAngles);
Entity: SCRIPT_REG_FUNC(GetLocalScale);
Entity: SCRIPT_REG_TEMPLFUNC(SetWorldPos,"vPos");
Entity: SCRIPT_REG_TEMPLFUNC(SetWorldAngles,"vAngles");
Entity: SCRIPT_REG_TEMPLFUNC(SetWorldScale,"fScale");
Entity: SCRIPT_REG_TEMPLFUNC(SetWorldScaleV, "vScale");
Entity: SCRIPT_REG_FUNC(GetWorldPos);
Entity: SCRIPT_REG_FUNC(GetWorldDir);
Entity: SCRIPT_REG_FUNC(GetWorldAngles);
Entity: SCRIPT_REG_FUNC(GetWorldScale);
Entity: SCRIPT_REG_TEMPLFUNC(GetBoneLocal, "");
Entity: SCRIPT_REG_TEMPLFUNC(IsEntityInside, "EntityId");
Entity: SCRIPT_REG_TEMPLFUNC(DrawSlot,"nSlot,nEnable");
Entity: SCRIPT_REG_TEMPLFUNC(IgnorePhysicsUpdatesOnSlot, "nSlot");
Entity: SCRIPT_REG_TEMPLFUNC(FreeSlot,"nSlot");
Entity: SCRIPT_REG_TEMPLFUNC(FreeAllSlots, "");
Entity: SCRIPT_REG_TEMPLFUNC(Physicalize,"nSlot,nPhysicsType,tPhysicsParams");
Entity: SCRIPT_REG_FUNC(DestroyPhysics);
Entity: SCRIPT_REG_FUNC(ResetPhysics);
Entity: SCRIPT_REG_TEMPLFUNC(AwakeCharacterPhysics,"nSlot,sRootBoneName,nAwake");
Entity: SCRIPT_REG_TEMPLFUNC(AwakePhysics,"nAwake");
Entity: SCRIPT_REG_TEMPLFUNC(EnablePhysics,"bEnable");
Entity: SCRIPT_REG_TEMPLFUNC(ActivatePlayerPhysics,"bEnable");
Entity: SCRIPT_REG_FUNC(SetPhysicParams);
Entity: SCRIPT_REG_FUNC(SetCharacterPhysicParams);
Entity: SCRIPT_REG_TEMPLFUNC(RagDollize,"slot");
Entity: SCRIPT_REG_TEMPLFUNC(PhysicalizeSlot, "slot, physicsParams");
Entity: SCRIPT_REG_TEMPLFUNC(UpdateSlotPhysics, "slot");
Entity: SCRIPT_REG_TEMPLFUNC(ReattachSoftEntityVtx, "EntityId, nPart");
Entity: SCRIPT_REG_TEMPLFUNC(SetColliderMode,"SetColliderMode");
Entity: SCRIPT_REG_FUNC(SetName);
Entity: SCRIPT_REG_FUNC(GetName);
Entity: SCRIPT_REG_FUNC(GetRawId);
Entity: SCRIPT_REG_FUNC(GetArchetype);
Entity: SCRIPT_REG_FUNC(SetAIName);
Entity: SCRIPT_REG_FUNC(GetAIName);
Entity: SCRIPT_REG_TEMPLFUNC(SetFlags, "flags, mode");
Entity: SCRIPT_REG_TEMPLFUNC(GetFlags, "");
Entity: SCRIPT_REG_TEMPLFUNC(HasFlags, "flags");
Entity: SCRIPT_REG_TEMPLFUNC(SetFlagsExtended, "flags, mode");
Entity: SCRIPT_REG_TEMPLFUNC(GetFlagsExtended, "");
Entity: SCRIPT_REG_TEMPLFUNC(HasFlagsExtended, "flags");
Entity: SCRIPT_REG_TEMPLFUNC(IntersectRay, "slot, rayOrigin, rayDir, maxDistance");
Entity: SCRIPT_REG_TEMPLFUNC(AttachChild,"childEntityId, flags");
Entity: SCRIPT_REG_FUNC(DetachThis);
Entity: SCRIPT_REG_FUNC(DetachAll);
Entity: SCRIPT_REG_FUNC(GetParent);
Entity: SCRIPT_REG_FUNC(GetChildCount);
Entity: SCRIPT_REG_TEMPLFUNC(GetChild,"nIndex");
Entity: SCRIPT_REG_TEMPLFUNC(EnableInheritXForm,"bEnable");
Entity: SCRIPT_REG_TEMPLFUNC(SetGeomCachePlaybackTime, "time");
Entity: SCRIPT_REG_TEMPLFUNC(SetGeomCacheParams, "looping, standIn, standInMaterial, firstFrameStandIn, firstFrameStandInMaterial, lastFrameStandIn, lastFrameStandInMaterial, standInDistance, streamInDistance");
Entity: SCRIPT_REG_TEMPLFUNC(SetGeomCacheStreaming, "active, time");
Entity: SCRIPT_REG_TEMPLFUNC(IsGeomCacheStreaming, "");
Entity: SCRIPT_REG_TEMPLFUNC(SetGeomCacheDrawing, "active");
Entity: SCRIPT_REG_TEMPLFUNC(GetGeomCachePrecachedTime, "");
Entity: SCRIPT_REG_FUNC(NetPresent);
Entity: SCRIPT_REG_FUNC(StartAnimation);
Entity: SCRIPT_REG_TEMPLFUNC(StopAnimation, "characterSlot, layer");
Entity: SCRIPT_REG_TEMPLFUNC(ResetAnimation, "characterSlot, layer");
Entity: SCRIPT_REG_TEMPLFUNC(RedirectAnimationToLayer0, "characterSlot, redirect");
Entity: SCRIPT_REG_TEMPLFUNC(SetAnimationBlendOut, "characterSlot, layer");
Entity: SCRIPT_REG_TEMPLFUNC(EnableBoneAnimation, "characterSlot, layer, boneName, enable");
Entity: SCRIPT_REG_TEMPLFUNC(EnableBoneAnimationAll, "characterSlot, layer, enable");
Entity: SCRIPT_REG_TEMPLFUNC(EnableProceduralFacialAnimation, "enable");
Entity: SCRIPT_REG_TEMPLFUNC(PlayFacialAnimation, "name, looping");
Entity: SCRIPT_REG_FUNC(GetHelperPos);
Entity: SCRIPT_REG_FUNC(GetHelperDir);
Entity: SCRIPT_REG_FUNC(GetHelperAngles);
Entity: SCRIPT_REG_TEMPLFUNC(GetSlotHelperPos, "slot, helperName, objectSpace");
Entity: SCRIPT_REG_FUNC(RenderShadow);
Entity: SCRIPT_REG_FUNC(SetRegisterInSectors);
Entity: SCRIPT_REG_FUNC(IsColliding);
Entity: SCRIPT_REG_FUNC(GetDirectionVector);
Entity: SCRIPT_REG_TEMPLFUNC(SetDirectionVector, "direction, [up]");
Entity: SCRIPT_REG_TEMPLFUNC(IsAnimationRunning, "characterSlot, layer");
Entity: SCRIPT_REG_FUNC(AddImpulse);
Entity: SCRIPT_REG_FUNC(AddConstraint);
Entity: SCRIPT_REG_FUNC(TriggerEvent);
Entity: SCRIPT_REG_TEMPLFUNC(SetLocalBBox,"min,max");
Entity: SCRIPT_REG_FUNC(GetLocalBBox);
Entity: SCRIPT_REG_FUNC(GetWorldBBox);
Entity: SCRIPT_REG_FUNC(GetProjectedWorldBBox);
Entity: SCRIPT_REG_TEMPLFUNC(SetTriggerBBox,"min,max");
Entity: SCRIPT_REG_FUNC(GetTriggerBBox);
Entity: SCRIPT_REG_FUNC(InvalidateTrigger);
Entity: SCRIPT_REG_TEMPLFUNC(ForwardTriggerEventsTo, "entityId");
Entity: SCRIPT_REG_FUNC(SetUpdateRadius);
Entity: SCRIPT_REG_FUNC(GetUpdateRadius);
Entity: SCRIPT_REG_TEMPLFUNC(Activate,"bActive");
Entity: SCRIPT_REG_TEMPLFUNC(IsActive,"");
Entity: SCRIPT_REG_TEMPLFUNC(IsFromPool,"");
Entity: SCRIPT_REG_TEMPLFUNC(SetUpdatePolicy,"nUpdatePolicy");
Entity: SCRIPT_REG_FUNC(SetPublicParam);  
Entity: SCRIPT_REG_TEMPLFUNC(SetAnimationEvent,"nSlot,sAnimation");
Entity: SCRIPT_REG_TEMPLFUNC(SetAnimationTime,"nSlot,nLayer,fTime");
Entity: SCRIPT_REG_TEMPLFUNC(GetAnimationTime,"nSlot,nLayer");
Entity: SCRIPT_REG_FUNC(SetAnimationKeyEvent);
Entity: SCRIPT_REG_TEMPLFUNC(DisableAnimationEvent,"nSlot,sAnimation");
Entity: SCRIPT_REG_TEMPLFUNC(SetAnimationSpeed,"characterSlot, layer, speed");
Entity: SCRIPT_REG_FUNC(SelectPipe);
Entity: SCRIPT_REG_FUNC(InsertSubpipe);
Entity: SCRIPT_REG_FUNC(CancelSubpipe);
Entity: SCRIPT_REG_FUNC(PassParamsToPipe);
Entity: SCRIPT_REG_FUNC(IsUsingPipe);
Entity: SCRIPT_REG_FUNC(GetCurAnimation);
Entity: SCRIPT_REG_FUNC(SetTimer);
Entity: SCRIPT_REG_FUNC(KillTimer);
Entity: SCRIPT_REG_TEMPLFUNC(SetScriptUpdateRate,"nMilliseconds");
Entity: SCRIPT_REG_TEMPLFUNC(GetAnimationLength, "characterSlot, animation");
Entity: SCRIPT_REG_TEMPLFUNC(SetAnimationFlip, "characterSlot, flip");
Entity: SCRIPT_REG_FUNC(GetAllAuxAudioProxiesID);
Entity: SCRIPT_REG_FUNC(GetDefaultAuxAudioProxyID);
Entity: SCRIPT_REG_FUNC(CreateAuxAudioProxy);
Entity: SCRIPT_REG_TEMPLFUNC(RemoveAuxAudioProxy, "hAudioProxyLocalID");
Entity: SCRIPT_REG_TEMPLFUNC(ExecuteAudioTrigger, "hTriggerID, hAudioProxyLocalID");
Entity: SCRIPT_REG_TEMPLFUNC(StopAudioTrigger, "hTriggerID, hAudioProxyLocalID");
Entity: SCRIPT_REG_TEMPLFUNC(SetAudioSwitchState, "hSwitchID, hSwitchStateID, hAudioProxyLocalID");
Entity: SCRIPT_REG_TEMPLFUNC(SetAudioObstructionCalcType, "nObstructionCalcType, hAudioProxyLocalID");
Entity: SCRIPT_REG_TEMPLFUNC(SetFadeDistance, "fFadeDistance");
Entity: SCRIPT_REG_TEMPLFUNC(SetAudioProxyOffset, "vOffset, hAudioProxyLocalID");
Entity: SCRIPT_REG_TEMPLFUNC(SetEnvironmentFadeDistance, "fEnvironmentFadeDistance");
Entity: SCRIPT_REG_TEMPLFUNC(SetAudioEnvironmentID, "hEnvironmentID");
Entity: SCRIPT_REG_FUNC(SetCurrentAudioEnvironments);
Entity: SCRIPT_REG_TEMPLFUNC(SetAudioRtpcValue, "hRtpcID, fValue, hAudioProxyLocalID");
Entity: SCRIPT_REG_TEMPLFUNC(AuxAudioProxiesMoveWithEntity, "bCanMoveWithEntity");
Entity: SCRIPT_REG_FUNC(GetBonePos);
Entity: SCRIPT_REG_FUNC(GetBoneDir);
Entity: SCRIPT_REG_TEMPLFUNC(GetBoneVelocity, "characterSlot, boneName");
Entity: SCRIPT_REG_TEMPLFUNC(GetBoneAngularVelocity, "characterSlot, boneName");
Entity: SCRIPT_REG_FUNC(GetBoneNameFromTable);
Entity: SCRIPT_REG_FUNC(GetTouchedSurfaceID);
Entity: SCRIPT_REG_FUNC(GetTouchedPoint);
Entity: SCRIPT_REG_TEMPLFUNC(CreateBoneAttachment, "characterSlot, boneName, attachmentName, bCallProjectAndSetDefaultPose");
Entity: SCRIPT_REG_TEMPLFUNC(CreateSkinAttachment, "characterSlot, attachmentName");
Entity: SCRIPT_REG_TEMPLFUNC(DestroyAttachment, "characterSlot, attachmentName");
Entity: SCRIPT_REG_TEMPLFUNC(GetAttachmentBone, "characterSlot, attachmentName");
Entity: SCRIPT_REG_TEMPLFUNC(GetAttachmentCGF, "characterSlot, attachmentName");
Entity: SCRIPT_REG_TEMPLFUNC(ResetAttachment, "characterSlot, attachmentName");
Entity: SCRIPT_REG_TEMPLFUNC(SetAttachmentEffect, "characterSlot, attachmentName, effectName, offset, dir, scale, flags");
Entity: SCRIPT_REG_TEMPLFUNC(SetAttachmentObject, "characterSlot, attachmentName, entityId, slot, flags");
Entity: SCRIPT_REG_TEMPLFUNC(SetAttachmentCGF, "characterSlot, attachmentName, filePath");
Entity: SCRIPT_REG_TEMPLFUNC(SetAttachmentLight, "characterSlot, attachmentName, lightTable, flags");
Entity: SCRIPT_REG_TEMPLFUNC(SetAttachmentPos, "characterSlot, attachmentName, pos");
Entity: SCRIPT_REG_TEMPLFUNC(SetAttachmentAngles, "characterSlot, attachmentName, angles");
Entity: SCRIPT_REG_TEMPLFUNC(SetAttachmentDir, "characterSlot, attachmentName, dir, worldSpace");
Entity: SCRIPT_REG_TEMPLFUNC(HideAttachment, "characterSlot, attachmentName, hide, hideShadow");
Entity: SCRIPT_REG_TEMPLFUNC(HideAllAttachments, "characterSlot, hide, hideShadow");
Entity: SCRIPT_REG_TEMPLFUNC(HideAttachmentMaster, "characterSlot, hide");
Entity: SCRIPT_REG_TEMPLFUNC(PhysicalizeAttachment, "characterSlot, attachmentName, physicalize");
Entity: SCRIPT_REG_TEMPLFUNC(GotoState, "sState");
Entity: SCRIPT_REG_TEMPLFUNC(IsInState, "sState");
Entity: SCRIPT_REG_FUNC(GetState);
Entity: SCRIPT_REG_FUNC(IsHidden);
Entity: SCRIPT_REG_FUNC(Damage);
Entity: SCRIPT_REG_FUNC(GetSpeed);
Entity: SCRIPT_REG_FUNC(GetExplosionObstruction);
Entity: SCRIPT_REG_FUNC(GetExplosionImpulse);
Entity: SCRIPT_REG_FUNC(SetMaterial);
Entity: SCRIPT_REG_FUNC(GetMaterial);
Entity: SCRIPT_REG_FUNC(GetEntityMaterial);
Entity: SCRIPT_REG_TEMPLFUNC(ChangeAttachmentMaterial, "attachmentName, materialName");
Entity: SCRIPT_REG_TEMPLFUNC(ReplaceMaterial,  "slot, name, replacement");
Entity: SCRIPT_REG_TEMPLFUNC(ResetMaterial,"slot");
Entity: SCRIPT_REG_TEMPLFUNC(CloneMaterial,"nSlot");
Entity: SCRIPT_REG_TEMPLFUNC(SetMaterialFloat,"nSlot,nSubMtlId,sParamName,fValue");
Entity: SCRIPT_REG_TEMPLFUNC(GetMaterialFloat,"nSlot,nSubMtlId,sParamName");
Entity: SCRIPT_REG_TEMPLFUNC(SetMaterialVec3,"nSlot,nSubMtlId,sParamName,vVector");
Entity: SCRIPT_REG_TEMPLFUNC(GetMaterialVec3,"nSlot,nSubMtlId,sParamName");
Entity: SCRIPT_REG_FUNC(MaterialFlashInvoke);
Entity: SCRIPT_REG_TEMPLFUNC(AddMaterialLayer, "shader");
Entity: SCRIPT_REG_TEMPLFUNC(RemoveMaterialLayer, "id");
Entity: SCRIPT_REG_TEMPLFUNC(RemoveAllMaterialLayers, "");
Entity: SCRIPT_REG_TEMPLFUNC(SetMaterialLayerParamF, "layerId, name, value");
Entity: SCRIPT_REG_TEMPLFUNC(SetMaterialLayerParamV, "layerId, name, value");
Entity: SCRIPT_REG_TEMPLFUNC(SetMaterialLayerParamC, "layerId, name, r, g, b, a");
Entity: SCRIPT_REG_TEMPLFUNC(EnableMaterialLayer, "enable, layer");
Entity: SCRIPT_REG_TEMPLFUNC(ToLocal, "slot, pos");           
Entity: SCRIPT_REG_TEMPLFUNC(ToGlobal, "slot, pos");          
Entity: SCRIPT_REG_TEMPLFUNC(VectorToLocal, "slot, dir");     
Entity: SCRIPT_REG_TEMPLFUNC(VectorToGlobal, "slot, dir");    
Entity: SCRIPT_REG_FUNC(SetDefaultIdleAnimations);
Entity: SCRIPT_REG_FUNC(GetVelocity);
Entity: SCRIPT_REG_FUNC(GetVelocityEx);
Entity: SCRIPT_REG_TEMPLFUNC(SetVelocity, "velocity");
Entity: SCRIPT_REG_TEMPLFUNC(SetVelocityEx, "velocity, angularVelocity");
Entity: SCRIPT_REG_FUNC(GetMass);
Entity: SCRIPT_REG_TEMPLFUNC(GetVolume, "slot");
Entity: SCRIPT_REG_TEMPLFUNC(GetGravity, "");
Entity: SCRIPT_REG_TEMPLFUNC(GetSubmergedVolume, "slot, planeNormal, planeOrigin");
Entity: SCRIPT_REG_TEMPLFUNC(CreateLink, "name");
Entity: SCRIPT_REG_TEMPLFUNC(SetLinkTarget, "name, targetId");
Entity: SCRIPT_REG_TEMPLFUNC(GetLinkTarget, "name");
Entity: SCRIPT_REG_TEMPLFUNC(RemoveLink, "name");
Entity: SCRIPT_REG_TEMPLFUNC(RemoveAllLinks, "");
Entity: SCRIPT_REG_TEMPLFUNC(GetLink, "idx");
Entity: SCRIPT_REG_TEMPLFUNC(GetLinkName, "targetId");
Entity: SCRIPT_REG_TEMPLFUNC(CountLinks, "");
Entity: SCRIPT_REG_FUNC(GetTimeSinceLastSeen);
Entity: SCRIPT_REG_FUNC(GetViewDistRatio);
Entity: SCRIPT_REG_FUNC(SetViewDistRatio);
Entity: SCRIPT_REG_FUNC(SetViewDistUnlimited);
Entity: SCRIPT_REG_FUNC(GetLodRatio);
Entity: SCRIPT_REG_FUNC(SetLodRatio);
Entity: SCRIPT_REG_FUNC(RemoveDecals);
Entity: SCRIPT_REG_TEMPLFUNC(ForceCharacterUpdate, "characterSlot, alwaysUpdate");
Entity: SCRIPT_REG_TEMPLFUNC(CharacterUpdateAlways, "characterSlot, alwaysUpdate");
Entity: SCRIPT_REG_TEMPLFUNC(CharacterUpdateOnRender, "characterSlot, bUpdateOnRender");
Entity: SCRIPT_REG_TEMPLFUNC(SetAnimateOffScreenShadow, "bAnimateOffScreenShadow");
Entity: SCRIPT_REG_FUNC(Hide);
Entity: SCRIPT_REG_FUNC(CheckCollisions);
Entity: SCRIPT_REG_FUNC(AwakeEnvironment);
Entity: SCRIPT_REG_FUNC(SetStateClientside);
Entity: SCRIPT_REG_FUNC(NoExplosionCollision);
Entity: SCRIPT_REG_FUNC(GetPhysicalStats);
Entity: SCRIPT_REG_TEMPLFUNC(NoBulletForce,"state");
Entity: SCRIPT_REG_TEMPLFUNC(UpdateAreas, "");
Entity: SCRIPT_REG_TEMPLFUNC(IsPointInsideArea, "areaId, point")
Entity: SCRIPT_REG_TEMPLFUNC(IsEntityInsideArea, "areaId, entityId");
Entity: SCRIPT_REG_TEMPLFUNC(BreakToPieces, "nSlot, nPiecesSlot, fExplodeImp, vHitPt, vHitImp, fLifeTime, fSpeed");
Entity: SCRIPT_REG_TEMPLFUNC(AttachSurfaceEffect, "nSlot, effect, countPerUnit, form, type, countScale, sizeScale");
Entity: SCRIPT_REG_FUNC(ProcessBroadcastEvent);
Entity: SCRIPT_REG_FUNC(ActivateOutput);
Entity: SCRIPT_REG_FUNC(CreateCameraProxy);
Entity: SCRIPT_REG_FUNC(UnSeenFrames);
Entity: SCRIPT_REG_FUNC(GetTimeOfDayHour);
Entity: SCRIPT_REG_FUNC(CreateDRSProxy);
GameAudio: SCRIPT_REG_TEMPLFUNC(JustPlaySignal, "audioSignalID");
GameAudio: SCRIPT_REG_TEMPLFUNC(JustPlayEntitySignal, "audioSignalID, entityId");
GameAudio: SCRIPT_REG_TEMPLFUNC(JustPlayPosSignal, "audioSignalID, vPos");
GameAudio: SCRIPT_REG_TEMPLFUNC(GetSignal, "name");
GameAudio: SCRIPT_REG_TEMPLFUNC(PlayEntitySignal, "audioSignalID, entityId");
GameAudio: SCRIPT_REG_TEMPLFUNC(IsPlayingEntitySignal, "audioSignalID, entityId");
GameAudio: SCRIPT_REG_TEMPLFUNC(StopEntitySignal, "audioSignalID, entityId");
GameAudio: SCRIPT_REG_TEMPLFUNC(SetEntitySignalParam, "audioSignalID, entityId, param, fValue");
GameAudio: SCRIPT_REG_TEMPLFUNC(PlaySignal, "audioSignalID");
GameAudio: SCRIPT_REG_TEMPLFUNC(StopSignal, "audioSignalID");
GameAudio: SCRIPT_REG_TEMPLFUNC(Announce, "announcement, context");
HitDeathReactions: SCRIPT_REG_TEMPLFUNC(OnHit, "scriptHitInfo");
HitDeathReactions: SCRIPT_REG_TEMPLFUNC(ExecuteHitReaction, "reactionParams");
HitDeathReactions: SCRIPT_REG_TEMPLFUNC(ExecuteDeathReaction, "reactionParams");
HitDeathReactions: SCRIPT_REG_FUNC(EndCurrentReaction);
HitDeathReactions: SCRIPT_REG_FUNC(StartReactionAnim);
HitDeathReactions: SCRIPT_REG_FUNC(EndReactionAnim);
HitDeathReactions: SCRIPT_REG_TEMPLFUNC(IsValidReaction, "reactionParams, scriptHitInfo");
HitDeathReactions: SCRIPT_REG_TEMPLFUNC(StartInteractiveAction, "szActionName");
Actor: SCRIPT_REG_FUNC(DumpActorInfo);
Actor: SCRIPT_REG_FUNC(Revive);
Actor: SCRIPT_REG_FUNC(Kill);
Actor: SCRIPT_REG_FUNC(ShutDown);
Actor: SCRIPT_REG_FUNC(SetParams);
Actor: SCRIPT_REG_FUNC(GetHeadDir);
Actor: SCRIPT_REG_FUNC(GetAimDir);
Actor: SCRIPT_REG_FUNC(PostPhysicalize);
Actor: SCRIPT_REG_FUNC(GetChannel);
Actor: SCRIPT_REG_FUNC(IsPlayer);
Actor: SCRIPT_REG_FUNC(IsMyPlayer); 
Actor: SCRIPT_REG_TEMPLFUNC(UseLadder, "ladderId"); 
Actor: SCRIPT_REG_FUNC(IsLocalClient);
Actor: SCRIPT_REG_FUNC(LinkToEntity);
Actor: SCRIPT_REG_TEMPLFUNC(GetLinkedVehicleId, "");
Actor: SCRIPT_REG_TEMPLFUNC(SetAngles,"vAngles");
Actor: SCRIPT_REG_FUNC(GetAngles);
Actor: SCRIPT_REG_TEMPLFUNC(SetMovementTarget,"pos,target,up,speed");
Actor: SCRIPT_REG_TEMPLFUNC(CameraShake,"amount,duration,frequency,pos");
Actor: SCRIPT_REG_TEMPLFUNC(SetViewShake,"shakeAngle, shakeShift, duration, frequency, randomness");
Actor: SCRIPT_REG_TEMPLFUNC(SetExtensionParams,"extension,params");
Actor: SCRIPT_REG_TEMPLFUNC(SvRefillAllAmmo, "refillType, refillAll, fragGrenadeCount, refillCurrentGrenadeType");
Actor: SCRIPT_REG_TEMPLFUNC(ClRefillAmmoResult, "ammoRefilled");
Actor: SCRIPT_REG_TEMPLFUNC(SvGiveAmmoClips, "numClips");
Actor: SCRIPT_REG_TEMPLFUNC(SetHealth,"health");
Actor: SCRIPT_REG_TEMPLFUNC(DamageInfo,"shooterID, targetID, weaponID, projectileID, damage, damageType, hitDirection");
Actor: SCRIPT_REG_TEMPLFUNC(GetLowHealthThreshold, "")
Actor: SCRIPT_REG_TEMPLFUNC(SetMaxHealth,"health");
Actor: SCRIPT_REG_FUNC(GetHealth);
Actor: SCRIPT_REG_FUNC(GetMaxHealth);
Actor: SCRIPT_REG_FUNC(IsImmuneToForbiddenArea);
Actor: SCRIPT_REG_TEMPLFUNC(SetPhysicalizationProfile, "profile");
Actor: SCRIPT_REG_TEMPLFUNC(GetPhysicalizationProfile, "");
Actor: SCRIPT_REG_TEMPLFUNC(QueueAnimationState,"animationState");
Actor: SCRIPT_REG_TEMPLFUNC(CreateCodeEvent,"params");
Actor: SCRIPT_REG_FUNC(PauseAnimationGraph);
Actor: SCRIPT_REG_FUNC(ResumeAnimationGraph);
Actor: SCRIPT_REG_FUNC(HurryAnimationGraph);
Actor: SCRIPT_REG_TEMPLFUNC(SetTurnAnimationParams, "turnThresholdAngle, turnThresholdTime");
Actor: SCRIPT_REG_TEMPLFUNC(SetSpectatorMode,"mode, target");
Actor: SCRIPT_REG_TEMPLFUNC(GetSpectatorMode,"");
Actor: SCRIPT_REG_TEMPLFUNC(GetSpectatorState,"");
Actor: SCRIPT_REG_TEMPLFUNC(GetSpectatorTarget, "");
Actor: SCRIPT_REG_TEMPLFUNC(Fall,"hitPosX, hitPosY, hitPosZ");
Actor: SCRIPT_REG_TEMPLFUNC(GetExtraHitLocationInfo, "slot, partId");
Actor: SCRIPT_REG_TEMPLFUNC(StandUp,"");
Actor: SCRIPT_REG_TEMPLFUNC(SetForcedLookDir, "dir");
Actor: SCRIPT_REG_TEMPLFUNC(ClearForcedLookDir, "");
Actor: SCRIPT_REG_TEMPLFUNC(SetForcedLookObjectId, "objectId");
Actor: SCRIPT_REG_TEMPLFUNC(ClearForcedLookObjectId, "");
Actor: SCRIPT_REG_TEMPLFUNC(PlayAction, "action");
Actor: SCRIPT_REG_TEMPLFUNC(PlayerSetViewAngles,"vAngles");
Actor: SCRIPT_REG_TEMPLFUNC(CanSpectacularKillOn, "targetId");
Actor: SCRIPT_REG_TEMPLFUNC(StartSpectacularKill, "targetId");
Actor: SCRIPT_REG_TEMPLFUNC(RegisterInAutoAimManager,"RegisterInAutoAimManager");
Actor: SCRIPT_REG_TEMPLFUNC(CheckBodyDamagePartFlags, "partID, materialID, bodyPartFlagsMask");
Actor: SCRIPT_REG_TEMPLFUNC(GetBodyDamageProfileID, "bodyDamageFileName, bodyDamagePartsFileName");
Actor: SCRIPT_REG_TEMPLFUNC(OverrideBodyDamageProfileID, "bodyDamageProfileID");
Actor: SCRIPT_REG_FUNC(IsGod);
Actor: SCRIPT_REG_FUNC(AcquireOrReleaseLipSyncExtension);
Actor: SCRIPT_REG_TEMPLFUNC(HolsterItem, "holster");
Actor: SCRIPT_REG_TEMPLFUNC(DropItem, "itemId");
Actor: SCRIPT_REG_TEMPLFUNC(PickUpItem, "itemId");
Actor: SCRIPT_REG_TEMPLFUNC(IsCurrentItemHeavy, "");
Actor: SCRIPT_REG_TEMPLFUNC(SelectNextItem, "direction, keepHistory, category");
Actor: SCRIPT_REG_TEMPLFUNC(SimpleFindItemIdInCategory, "category");
Actor: SCRIPT_REG_TEMPLFUNC(PickUpPickableAmmo, "ammoName, count");
Actor: SCRIPT_REG_TEMPLFUNC(SelectItemByName, "name, [forceFastSelect]");
Actor: SCRIPT_REG_TEMPLFUNC(SelectItem, "itemId, forceSelect");
Actor: SCRIPT_REG_TEMPLFUNC(SelectLastItem, "");
Actor: SCRIPT_REG_TEMPLFUNC(EnableHitReaction, "");
Actor: SCRIPT_REG_TEMPLFUNC(DisableHitReaction, "");
Actor: SCRIPT_REG_TEMPLFUNC(CreateIKLimb,"slot,limbName,rootBone,midBone,endBone,flags");
Actor: SCRIPT_REG_TEMPLFUNC(RefreshPickAndThrowObjectPhysics, "");
Actor: SCRIPT_REG_TEMPLFUNC(GetFaction, "");
Actor: SCRIPT_REG_TEMPLFUNC(SetFaction, "nFaction, bForce");
GameAI: SCRIPT_REG_TEMPLFUNC(RegisterWithModule, "moduleName, entityId");
GameAI: SCRIPT_REG_TEMPLFUNC(UnregisterWithModule, "moduleName, entityId");
GameAI: SCRIPT_REG_TEMPLFUNC(UnregisterWithAllModules, "entityId");
GameAI: SCRIPT_REG_TEMPLFUNC(PauseModule, "moduleName, entityId");
GameAI: SCRIPT_REG_TEMPLFUNC(PauseAllModules, "entityId");
GameAI: SCRIPT_REG_TEMPLFUNC(ResumeModule, "moduleName, entityId");
GameAI: SCRIPT_REG_TEMPLFUNC(ResumeAllModules, "entityId");
GameAI: SCRIPT_REG_TEMPLFUNC(GetClosestEntityToTarget, "attackerPos, targetPos, radius, maxAngle");
GameAI: SCRIPT_REG_TEMPLFUNC(GetBattleFrontPosition, "groupID");
GameAI: SCRIPT_REG_FUNC(ResetAdvantagePointOccupancyControl);
GameAI: SCRIPT_REG_TEMPLFUNC(OccupyAdvantagePoint, "entityId, point");
GameAI: SCRIPT_REG_TEMPLFUNC(ReleaseAdvantagePointFor, "entityId");
GameAI: SCRIPT_REG_TEMPLFUNC(IsAdvantagePointOccupied, "point");
GameAI: SCRIPT_REG_TEMPLFUNC(StartSearchModuleFor, "groupID, point, [targetId], [searchSpotTimeout]");
GameAI: SCRIPT_REG_TEMPLFUNC(StopSearchModuleFor, "groupID");
GameAI: SCRIPT_REG_TEMPLFUNC(GetNextSearchSpot, "entityId, closenessToAgentWeight, closenessToTargetWeight, minDistanceFromAgent, [closenessToTargetCurrentPosWeight]");
GameAI: SCRIPT_REG_TEMPLFUNC(MarkAssignedSearchSpotAsUnreachable, "entityId");
GameAI: SCRIPT_REG_TEMPLFUNC(ResetRanges, "entityID");
GameAI: SCRIPT_REG_TEMPLFUNC(AddRange, "entityID, range, enterSignal, leaveSignal");
GameAI: SCRIPT_REG_TEMPLFUNC(GetRangeState, "entityID, rangeID");
GameAI: SCRIPT_REG_TEMPLFUNC(ChangeRange, "entityID, rangeID, distance");
GameAI: SCRIPT_REG_TEMPLFUNC(ResetAloneDetector, "entityID");
GameAI: SCRIPT_REG_TEMPLFUNC(SetupAloneDetector, "entityID, range, aloneSignal, notAloneSignal");
GameAI: SCRIPT_REG_TEMPLFUNC(AddActorClassToAloneDetector, "entityID, entityClassName");
GameAI: SCRIPT_REG_TEMPLFUNC(RemoveActorClassFromAloneDetector, "entityID, entityClassName");
GameAI: SCRIPT_REG_TEMPLFUNC(IsAloneForAloneDetector, "entityID");
GameAI: SCRIPT_REG_TEMPLFUNC(RegisterObjectVisible, "entityID");
GameAI: SCRIPT_REG_TEMPLFUNC(UnregisterObjectVisible, "entityID");
GameAI: SCRIPT_REG_FUNC(IsAISystemEnabled);
GameAI: SCRIPT_REG_TEMPLFUNC(RegisterEntityForAISquadManager, "entityID");
GameAI: SCRIPT_REG_TEMPLFUNC(RemoveEntityForAISquadManager, "entityID");
GameAI: SCRIPT_REG_TEMPLFUNC(GetSquadId, "entityId");
GameAI: SCRIPT_REG_TEMPLFUNC(GetSquadMembers, "squadId");
GameAI: SCRIPT_REG_TEMPLFUNC(GetAveragePositionOfSquadScopeUsers, "entityId, squadScopeName");
GameAI: SCRIPT_REG_TEMPLFUNC(GetSquadScopeUserCount, "entityId, squadScopeName");
GameAI: SCRIPT_REG_TEMPLFUNC(IsSwimmingUnderwater, "entityID");
GameAI: SCRIPT_REG_TEMPLFUNC(GetAgentTypeID, "name");
GameAI: SCRIPT_REG_TEMPLFUNC(IsLocationValidInNavigationMesh, "agentTypeID, pos");
Boids: SCRIPT_REG_TEMPLFUNC(CreateFlock,"entity,nType,tParamsTable");
Boids: SCRIPT_REG_TEMPLFUNC(SetFlockParams,"entity,tParamsTable");
Boids: SCRIPT_REG_TEMPLFUNC(EnableFlock,"entity,bEnable" );
Boids: SCRIPT_REG_TEMPLFUNC(SetFlockPercentEnabled,"entity,fPercentage" );
Boids: SCRIPT_REG_TEMPLFUNC(OnBoidHit,"boidEntity,hit" );
Boids: SCRIPT_REG_TEMPLFUNC(SetAttractionPoint, "entity,point");
Boids: SCRIPT_REG_TEMPLFUNC(CanPickup,"flockEntity,boidEntity");
Boids: SCRIPT_REG_TEMPLFUNC(GetUsableMessage,"flockEntity");
Boids: SCRIPT_REG_TEMPLFUNC(OnPickup,"flockEntity,boidEntity,isPickup,throwSpeed");
InteractiveObject: SCRIPT_REG_TEMPLFUNC(CanUse, "userId");
InteractiveObject: SCRIPT_REG_TEMPLFUNC(Use, "userId");
InteractiveObject: SCRIPT_REG_TEMPLFUNC(StopUse, "userId");
InteractiveObject: SCRIPT_REG_TEMPLFUNC(AbortUse, "");
LightningArc: SCRIPT_REG_TEMPLFUNC(TriggerSpark, "");
LightningArc: SCRIPT_REG_TEMPLFUNC(Enable, "enable");
LightningArc: SCRIPT_REG_TEMPLFUNC(ReadLuaParameters, "");
Game: SCRIPT_REG_TEMPLFUNC(ShowMainMenu, "");
Game: SCRIPT_REG_TEMPLFUNC(PauseGame, "pause");
Game: SCRIPT_REG_FUNC(IsMountedWeaponUsableWithTarget);
Game: SCRIPT_REG_TEMPLFUNC(IsPlayer, "entityId");
Game: SCRIPT_REG_TEMPLFUNC(RegisterVTOL, "entityId");
Game: SCRIPT_REG_TEMPLFUNC(AddTacticalEntity, "entityId, type");
Game: SCRIPT_REG_TEMPLFUNC(RemoveTacticalEntity, "entityId, type");
Game: SCRIPT_REG_TEMPLFUNC(RegisterWithAutoAimManager, "entityId, innerRadiusFactor, outerRadiusFactor, snapRadiusFactor");
Game: SCRIPT_REG_TEMPLFUNC(UnregisterFromAutoAimManager, "entityId");
Game: SCRIPT_REG_TEMPLFUNC(OnAmmoCrateSpawned, "providesFragGrenades");
Game: SCRIPT_REG_TEMPLFUNC(CacheResource, "whoIsRequesting, resourceName, resourceType, resourceFlags");
Game: SCRIPT_REG_TEMPLFUNC(CacheActorClassResources, "actorEntityClassName");
Game: SCRIPT_REG_TEMPLFUNC(CacheEntityArchetype, "archetypeName");
Game: SCRIPT_REG_TEMPLFUNC(CacheBodyDamageProfile, "bodyDamageFileName, bodyDamagePartsFileName");
Game: SCRIPT_REG_TEMPLFUNC(SaveCheckpoint, "checkpointId, fileName");
Game: SCRIPT_REG_TEMPLFUNC(LoadCheckpoint, "checkpointId");
Game: SCRIPT_REG_TEMPLFUNC(QuickLoad, "");
Game: SCRIPT_REG_TEMPLFUNC(QueueDeferredKill, "entityId");
Game: SCRIPT_REG_TEMPLFUNC(OnEnvironmentalWeaponHealthChanged, "entityId");
Game: SCRIPT_REG_TEMPLFUNC(ResetEntity, "entityId");
Game: SCRIPT_REG_TEMPLFUNC(SetDangerousRigidBodyDangerStatus, "entityId, isDangerous, triggerPlayerId");
Game: SCRIPT_REG_TEMPLFUNC(SendEventToGameObject, "entityId, event" );
Game: SCRIPT_REG_TEMPLFUNC(CacheEquipmentPack, "equipmentPackName");
Game: SCRIPT_REG_TEMPLFUNC(DebugDrawCylinder, "x, y, z, radius, height, r, g, b, a");
Game: SCRIPT_REG_TEMPLFUNC(DebugDrawCone, "x, y, z, radius, height, r, g, b, a");
Game: SCRIPT_REG_TEMPLFUNC(DebugDrawAABB, "x, y, z, x2, y2, z2, r, g, b, a");
Game: SCRIPT_REG_TEMPLFUNC(DebugDrawPersistanceDirection, "startX, startY, startZ, dirX, dirY, dirZ, r, g, b, duration");
Game: SCRIPT_REG_TEMPLFUNC(LoadPrefabLibrary, "filename");
Game: SCRIPT_REG_TEMPLFUNC(SpawnPrefab, "entityId, libname, prefabname, seed, nMaxSpawn");
Game: SCRIPT_REG_TEMPLFUNC(MovePrefab, "entityId");
Game: SCRIPT_REG_TEMPLFUNC(DeletePrefab, "entityId");
Game: SCRIPT_REG_TEMPLFUNC(HidePrefab, "entityId, bHide");
ProtectedBinds: SCRIPT_REG_TEMPLFUNC( GetPersistantStat, "name" );
ProtectedBinds: SCRIPT_REG_TEMPLFUNC( SetPersistantStat, "name, valueTab ");
ProtectedBinds: SCRIPT_REG_TEMPLFUNC( SavePersistantStatsToBlaze, "");
ProtectedBinds: SCRIPT_REG_TEMPLFUNC( GetProfileAttribute, "name" );
ProtectedBinds: SCRIPT_REG_TEMPLFUNC( SetProfileAttribute, "name, valueTab" );
ProtectedBinds: SCRIPT_REG_TEMPLFUNC( ActivateDemoEventEntitlement, "");
ScriptControlledPhysics: SCRIPT_REG_TEMPLFUNC(Reset, "");
ScriptControlledPhysics: SCRIPT_REG_TEMPLFUNC(GetSpeed, "");
ScriptControlledPhysics: SCRIPT_REG_TEMPLFUNC(GetAcceleration, "");
ScriptControlledPhysics: SCRIPT_REG_TEMPLFUNC(GetAngularSpeed, "");
ScriptControlledPhysics: SCRIPT_REG_TEMPLFUNC(GetAngularAcceleration, "");
ScriptControlledPhysics: SCRIPT_REG_TEMPLFUNC(MoveTo, "point, initialSpeed, speed, acceleration, stopTime");
ScriptControlledPhysics: SCRIPT_REG_TEMPLFUNC(RotateTo, "dir, roll, initialSpeed, speed, acceleration, stopTime");
ScriptControlledPhysics: SCRIPT_REG_TEMPLFUNC(RotateToAngles, "angles, initialSpeed, speed, acceleration, stopTime");
ScriptControlledPhysics: SCRIPT_REG_TEMPLFUNC(HasArrived, "");
GameRules: SCRIPT_REG_TEMPLFUNC(IsServer, "");
GameRules: SCRIPT_REG_TEMPLFUNC(IsClient, "");
GameRules: SCRIPT_REG_TEMPLFUNC(IsMultiplayer, "");
GameRules: SCRIPT_REG_TEMPLFUNC(CanCheat, "");
GameRules: SCRIPT_REG_TEMPLFUNC(SpawnPlayer, "channelId, name, className, pos, angles");
GameRules: SCRIPT_REG_TEMPLFUNC(Revive, "playerId");
GameRules: SCRIPT_REG_TEMPLFUNC(RevivePlayer, "playerId, pos, angles, teamId, clearInventory");
GameRules: SCRIPT_REG_TEMPLFUNC(RevivePlayerInVehicle, "playerId, vehicleId, seatId, teamId, clearInventory");
GameRules: SCRIPT_REG_TEMPLFUNC(IsPlayer, "playerId");
GameRules: SCRIPT_REG_TEMPLFUNC(IsProjectile, "entityId");
GameRules: SCRIPT_REG_TEMPLFUNC(AddSpawnLocation, "entityId, isInitialSpawn, doVisTest, pGroupName");
GameRules: SCRIPT_REG_TEMPLFUNC(RemoveSpawnLocation, "id, isInitialSpawn");
GameRules: SCRIPT_REG_TEMPLFUNC(EnableSpawnLocation, "entityId, isInitialSpawn, pGroupName");
GameRules: SCRIPT_REG_TEMPLFUNC(DisableSpawnLocation, "id, isInitialSpawn");
GameRules: SCRIPT_REG_TEMPLFUNC(GetFirstSpawnLocation, "teamId");
GameRules: SCRIPT_REG_TEMPLFUNC(AddSpawnGroup, "groupId");
GameRules: SCRIPT_REG_TEMPLFUNC(AddSpawnLocationToSpawnGroup, "groupId, location");
GameRules: SCRIPT_REG_TEMPLFUNC(RemoveSpawnLocationFromSpawnGroup, "groupId, location");
GameRules: SCRIPT_REG_TEMPLFUNC(RemoveSpawnGroup, "groupId");
GameRules: SCRIPT_REG_TEMPLFUNC(GetSpawnGroups, "");
GameRules: SCRIPT_REG_TEMPLFUNC(IsSpawnGroup, "entityId");
GameRules: SCRIPT_REG_TEMPLFUNC(SetPlayerSpawnGroup, "playerId, groupId");
GameRules: SCRIPT_REG_TEMPLFUNC(AddSpectatorLocation, "location");
GameRules: SCRIPT_REG_TEMPLFUNC(RemoveSpectatorLocation, "id");
GameRules: SCRIPT_REG_TEMPLFUNC(ServerExplosion, "shooterId, weaponId, dmg, pos, dir, radius, angle, press, holesize, [effect], [effectScale]");
GameRules: SCRIPT_REG_TEMPLFUNC(ServerHit, "targetId, shooterId, weaponId, dmg, radius, materialId, partId, typeId, [pos], [dir], [normal]");
GameRules: SCRIPT_REG_TEMPLFUNC(ClientSelfHarm, "dmg, materialId, partId, typeId, dir");
GameRules: SCRIPT_REG_TEMPLFUNC(ClientSelfHarmByEntity, "sourceEntity, dmg, materialId, partId, typeId, dir");
GameRules: SCRIPT_REG_TEMPLFUNC(ServerHarmVehicle, "vehicle, dmg, materialId, typeId, dir");
GameRules: SCRIPT_REG_TEMPLFUNC(GetTeamName, "teamId");
GameRules: SCRIPT_REG_TEMPLFUNC(GetTeamId, "teamName");
GameRules: SCRIPT_REG_TEMPLFUNC(SetTeam, "teamId, playerId");
GameRules: SCRIPT_REG_TEMPLFUNC(ClientSetTeam, "teamId, playerId");
GameRules: SCRIPT_REG_TEMPLFUNC(GetTeam, "playerId");
GameRules: SCRIPT_REG_TEMPLFUNC(Announce, "playerId, msg, context");
GameRules: SCRIPT_REG_TEMPLFUNC(ForbiddenAreaWarning, "active, timer, targetId");
GameRules: SCRIPT_REG_TEMPLFUNC(GetServerTime, "");
GameRules: SCRIPT_REG_TEMPLFUNC(EndGame, "");
GameRules: SCRIPT_REG_TEMPLFUNC(NextLevel, "");
GameRules: SCRIPT_REG_TEMPLFUNC(GetHitMaterialId, "materialName");
GameRules: SCRIPT_REG_TEMPLFUNC(GetHitTypeId, "type");
GameRules: SCRIPT_REG_TEMPLFUNC(GetHitType, "id");
GameRules: SCRIPT_REG_TEMPLFUNC(IsHitTypeIdMelee, "hitTypeId");
GameRules: SCRIPT_REG_TEMPLFUNC(IsDemoMode, "");
GameRules: SCRIPT_REG_TEMPLFUNC(DebugCollisionDamage, "");
GameRules: SCRIPT_REG_TEMPLFUNC(SendDamageIndicator, "targetId, shooterId, weaponId, dir, damage, projectileClassId, hitTypeId");
GameRules: SCRIPT_REG_TEMPLFUNC(EnteredGame, "");
GameRules: SCRIPT_REG_TEMPLFUNC(Watch, "text");
GameRules: SCRIPT_REG_TEMPLFUNC(DemiGodDeath, "");
GameRules: SCRIPT_REG_TEMPLFUNC(GetPrimaryTeam, "");
GameRules: SCRIPT_REG_TEMPLFUNC(AddForbiddenArea, "entityId");
GameRules: SCRIPT_REG_TEMPLFUNC(RemoveForbiddenArea, "entityId");
GameRules: SCRIPT_REG_TEMPLFUNC(MakeMovementVisibleToAI, "entityClass");
GameRules: SCRIPT_REG_TEMPLFUNC(SendGameRulesObjectiveEntitySignal, "entityId, signal");
GameRules: SCRIPT_REG_TEMPLFUNC(ReRecordEntity, "entityId");
GameRules: SCRIPT_REG_TEMPLFUNC(ShouldGiveLocalPlayerHitFeedback2DSound, "damage");
GameRules: SCRIPT_REG_TEMPLFUNC(CanUsePowerStruggleNode, "userId, entityId");
GameRules: SCRIPT_REG_FUNC(SendTextMessage);
GameRules: SCRIPT_REG_TEMPLFUNC(IsActionable, "userId");
GameRules: SCRIPT_REG_TEMPLFUNC(DidActionsChange, "userId");
GameRules: SCRIPT_REG_TEMPLFUNC(GetActions, "userId, actions");
GameRules: SCRIPT_REG_TEMPLFUNC(PerformAction, "userId, action");
GameRules: SCRIPT_REG_TEMPLFUNC(DisplayActionableMenu, "");
GameRules: SCRIPT_REG_TEMPLFUNC(GetStorageContent, "entityId, [entityClassFilter]");
Item: SCRIPT_REG_TEMPLFUNC(Reset, "");
Item: SCRIPT_REG_TEMPLFUNC(CanPickUp, "userId");
Item: SCRIPT_REG_TEMPLFUNC(CanUse, "userId");
Item: SCRIPT_REG_TEMPLFUNC(CanUseVehicle, "userId");
Item: SCRIPT_REG_TEMPLFUNC(IsPickable, "");
Item: SCRIPT_REG_TEMPLFUNC(IsMounted, "");
Item: SCRIPT_REG_TEMPLFUNC(GetUsableText, "");
Item: SCRIPT_REG_TEMPLFUNC(GetOwnerId, "");
Item: SCRIPT_REG_TEMPLFUNC(StartUse, "userId");
Item: SCRIPT_REG_TEMPLFUNC(StopUse, "userId");
Item: SCRIPT_REG_TEMPLFUNC(Use, "userId");
Item: SCRIPT_REG_TEMPLFUNC(IsUsed, "");
Item: SCRIPT_REG_TEMPLFUNC(GetMountedDir, "");
Item: SCRIPT_REG_TEMPLFUNC(SetMountedAngleLimits,"min_pitch, max_pitch, yaw_range");
Item: SCRIPT_REG_TEMPLFUNC(OnHit, "hit");
Item: SCRIPT_REG_TEMPLFUNC(IsDestroyed, "");
Item: SCRIPT_REG_TEMPLFUNC(OnUsed, "userId");
Item: SCRIPT_REG_TEMPLFUNC(HasAccessory, "accessoryClass");
Item: SCRIPT_REG_TEMPLFUNC(AllowDrop, "");
Item: SCRIPT_REG_TEMPLFUNC(DisallowDrop, "");
Item: SCRIPT_REG_TEMPLFUNC(IsActionable, "userId");
Item: SCRIPT_REG_TEMPLFUNC(GetActions, "userId, actions");
Item: SCRIPT_REG_TEMPLFUNC(PerformAction, "userId, action");
Item: SCRIPT_REG_FUNC(GetDisplayName);
Item: SCRIPT_REG_TEMPLFUNC(IsStackable, "");
Item: SCRIPT_REG_TEMPLFUNC(GetMaxStackSize, "");
Item: SCRIPT_REG_TEMPLFUNC(GetStackCount, "");
Item: SCRIPT_REG_TEMPLFUNC(SetStackCount, "count");
Item: SCRIPT_REG_TEMPLFUNC(IsMagazine, "");
Item: SCRIPT_REG_TEMPLFUNC(IsDestroyable, "");
Item: SCRIPT_REG_TEMPLFUNC(GetMaxHealth, "");
Item: SCRIPT_REG_TEMPLFUNC(GetHealth, "");
Item: SCRIPT_REG_TEMPLFUNC(SetHealth, "health");
Item: SCRIPT_REG_TEMPLFUNC(IsConsumable, "");
Item: SCRIPT_REG_TEMPLFUNC(IsRefillable, "");
Item: SCRIPT_REG_TEMPLFUNC(GetConsumablePercent, "");
Item: SCRIPT_REG_TEMPLFUNC(SetConsumablePercent, "percent");
Item: SCRIPT_REG_TEMPLFUNC(GetConsumableType, "");
Item: SCRIPT_REG_TEMPLFUNC(SetConsumableType, "type");
Item: SCRIPT_REG_TEMPLFUNC(GetGUID, "");
Weapon: SCRIPT_REG_TEMPLFUNC(SetAmmoCount, "")
Weapon: SCRIPT_REG_TEMPLFUNC(GetAmmoCount, "")
Weapon: SCRIPT_REG_TEMPLFUNC(GetClipSize, "")
Weapon: SCRIPT_REG_TEMPLFUNC(GetAmmoType, "")
Weapon: SCRIPT_REG_TEMPLFUNC(SupportsAccessory, "accessoryName");
Weapon: SCRIPT_REG_TEMPLFUNC(GetAccessory, "accessoryName");
Weapon: SCRIPT_REG_TEMPLFUNC(AttachAccessory, "accessoryName, attach, force");
Weapon: SCRIPT_REG_TEMPLFUNC(SwitchAccessory, "accessoryName");
Weapon: SCRIPT_REG_TEMPLFUNC(SetCurrentFireMode, "name")
Weapon: SCRIPT_REG_TEMPLFUNC(Reload, "")
MatchMaking: SCRIPT_REG_TEMPLFUNC( IsSquadLeaderOrSolo, "");
MatchMaking: SCRIPT_REG_TEMPLFUNC( CancelSearch, "" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( IsJoiningSession, "" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( IsSessionHost, "" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( IsInSession, "" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( HasGameStarted, "" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( HaveEnoughPlayersToStart, "" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( GetNumPlayersInCurrentSession, "" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( GetNumPlayersInSquad, "" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( GetMaxNumPlayers, "" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( GetCurrentRegion, "" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( GetCurrentLanguage, "" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( GetAverageSkillScore, "" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( GetCurrentMatchMakingVersionNum, "" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( GetCurrentPlaylist, "" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( GetCurrentVariant, "" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( GetCurrentPing, "" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( GetAvailableDLCs, "" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( StartSearch, "freeSlots,maxResults,searchParams" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( MergeWithServer, "sessionId" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( JoinServer, "sessionId" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( CreateServer, "sessionParams" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( RequestUpdateCall, "timeToCall" );
MatchMaking: SCRIPT_REG_TEMPLFUNC( MMLog, "message,isError" );
Animal: SCRIPT_REG_TEMPLFUNC(OnHit, "animalEntity, hit");
Animal: SCRIPT_REG_TEMPLFUNC(IsDead, "animalEntity");
BaseBuildingSystem: SCRIPT_REG_FUNC(GetPlotSigns);
BaseBuildingSystem: SCRIPT_REG_TEMPLFUNC(GetPlotSign, "plotSignId");
PlotSign: SCRIPT_REG_TEMPLFUNC(GetPartCount, "");
PlotSign: SCRIPT_REG_TEMPLFUNC(GetPartId, "index");
PlotSign: SCRIPT_REG_TEMPLFUNC(GetPartTypeId, "partId");
PlotSign: SCRIPT_REG_TEMPLFUNC(GetPartClassName, "partId");
PlotSign: SCRIPT_REG_TEMPLFUNC(GetPartHierarchyParents, "partId");
PlotSign: SCRIPT_REG_TEMPLFUNC(CanPackUp, "partId");
PlotSign: SCRIPT_REG_TEMPLFUNC(GetMaxHealth, "partId");
PlotSign: SCRIPT_REG_TEMPLFUNC(SetDamage, "partId, damage");
PlotSign: SCRIPT_REG_TEMPLFUNC(GetDamage, "partId");
PlotSign: SCRIPT_REG_FUNC(GetOwnerSteam64Id);
PlotSign: SCRIPT_REG_FUNC(GetClanId);
PlotSign: SCRIPT_REG_TEMPLFUNC(AddPartByType, "partTypeId, relativePos, relativeAng");
PlotSign: SCRIPT_REG_TEMPLFUNC(PackupPart, "partId");
PlotSign: SCRIPT_REG_TEMPLFUNC(DeletePart, "partId");
PersistentWorldManager: SCRIPT_REG_TEMPLFUNC(QueryBattleStatus, "");
PersistentWorldManager: SCRIPT_REG_TEMPLFUNC(GetNumLightsActivated,"");
PersistentWorldManager: SCRIPT_REG_FUNC(IsMountedWeaponUsableWithTarget);
PersistentWorldManager: SCRIPT_REG_TEMPLFUNC(SavePersistentPlayer, "entityId");
PersistentWorldManager: SCRIPT_REG_TEMPLFUNC(ApplyRadiationToPlayer, "entityId, radiation");
PersistentWorldManager: SCRIPT_REG_FUNC(ResetVehicleSpawner);
AISpawnerManager: SCRIPT_REG_TEMPLFUNC(SpawnCategory, "pos, category, forceNum, minRadius, maxRadius, radius");
AISpawnerManager: SCRIPT_REG_TEMPLFUNC(SpawnHorde, "pos, category");
AISpawnerManager: SCRIPT_REG_TEMPLFUNC(SpawnInvasion, "posSpawn, posDestination, category, forceNum");
ItemSpawnerManager: SCRIPT_REG_TEMPLFUNC(GiveItem, "playerId, className, [select], [parentId], [slot]");
ItemSpawnerManager: SCRIPT_REG_TEMPLFUNC(SpawnItem, "className, pos");
ItemSpawnerManager: SCRIPT_REG_TEMPLFUNC(SpawnCategory, "categoryName, pos");
MyPlayer: SCRIPT_REG_FUNC(GetActivePlotSignId);
MyPlayer: SCRIPT_REG_FUNC(TeleportTo);
MyPlayer: SCRIPT_REG_FUNC(GetSteam64Id);
MyPlayer: SCRIPT_REG_TEMPLFUNC(SetHealth, "value");
MyPlayer: SCRIPT_REG_TEMPLFUNC(GetHealth, "");
MyPlayer: SCRIPT_REG_TEMPLFUNC(SetFood, "value");
MyPlayer: SCRIPT_REG_TEMPLFUNC(GetFood, "");
MyPlayer: SCRIPT_REG_TEMPLFUNC(SetWater, "value");
MyPlayer: SCRIPT_REG_TEMPLFUNC(GetWater, "");
MyPlayer: SCRIPT_REG_TEMPLFUNC(SetTemperature, "value");
MyPlayer: SCRIPT_REG_TEMPLFUNC(GetTemperature, "");
MyPlayer: SCRIPT_REG_TEMPLFUNC(SetRadiation, "value");
MyPlayer: SCRIPT_REG_TEMPLFUNC(GetRadiation, "");
MyPlayer: SCRIPT_REG_TEMPLFUNC(SetBleedingLevel, "value");
MyPlayer: SCRIPT_REG_TEMPLFUNC(GetBleedingLevel, "");
MyPlayer: SCRIPT_REG_TEMPLFUNC(SetPoisonType, "value");
MyPlayer: SCRIPT_REG_TEMPLFUNC(IsPoisoned, "");
MyPlayer: SCRIPT_REG_TEMPLFUNC(SetOxygen, "value");
MyPlayer: SCRIPT_REG_TEMPLFUNC(GetOxygen, "");
MyPlayer: SCRIPT_REG_TEMPLFUNC(SetStamina, "value");
MyPlayer: SCRIPT_REG_TEMPLFUNC(GetStamina, "");
MyPlayer: SCRIPT_REG_TEMPLFUNC(SetTorpidity, "value");
MyPlayer: SCRIPT_REG_TEMPLFUNC(GetTorpidity, "");
MyPlayer: SCRIPT_REG_TEMPLFUNC(SetUnconcious, "value");
MyPlayer: SCRIPT_REG_TEMPLFUNC(IsUnconcious, "");
MyPlayer: SCRIPT_REG_TEMPLFUNC(GetClanId, "");
MyPlayer: SCRIPT_REG_TEMPLFUNC(GetClanData, "");
MyPlayer: SCRIPT_REG_TEMPLFUNC(ResetActionable, "");
Turret: SCRIPT_REG_TEMPLFUNC( Enable, "" );
Turret: SCRIPT_REG_TEMPLFUNC( Disable, "" );
Turret: SCRIPT_REG_TEMPLFUNC( OnPropertyChange, "" );
Turret: SCRIPT_REG_TEMPLFUNC( OnHit, "hitScriptTable" );
Turret: SCRIPT_REG_TEMPLFUNC( SetStateById, "stateId" );
Turret: SCRIPT_REG_TEMPLFUNC( SetFactionToPlayerFaction, "" );
HUD: SCRIPT_REG_TEMPLFUNC(SetObjectiveStatus,"objective,status,silent");
HUD: SCRIPT_REG_TEMPLFUNC(SetObjectiveEntity,"objective,entityName");
HUD: SCRIPT_REG_TEMPLFUNC(ClearObjectiveEntity,"objective");
HUD: SCRIPT_REG_TEMPLFUNC(AddEntityToRadar, "entityId");
HUD: SCRIPT_REG_TEMPLFUNC(RemoveEntityFromRadar, "entityId");
HUD: SCRIPT_REG_TEMPLFUNC(OnGameStatusUpdate, "goodBad, msg");
HUD: SCRIPT_REG_TEMPLFUNC(RemoveObjective, "entityId");
Movie: SCRIPT_REG_TEMPLFUNC(PlaySequence,"sSequenceName");
Movie: SCRIPT_REG_TEMPLFUNC(StopSequence,"sSequenceName");
Movie: SCRIPT_REG_TEMPLFUNC(AbortSequence,"sSequenceName");
Movie: SCRIPT_REG_FUNC(StopAllSequences);
Movie: SCRIPT_REG_FUNC(StopAllCutScenes);
Movie: SCRIPT_REG_FUNC(PauseSequences);
Movie: SCRIPT_REG_FUNC(ResumeSequences);
Particle: SCRIPT_REG_TEMPLFUNC(CreateEffect, "name, params");
Particle: SCRIPT_REG_TEMPLFUNC(DeleteEffect, "name");
Particle: SCRIPT_REG_TEMPLFUNC(IsEffectAvailable, "name");
Particle: SCRIPT_REG_TEMPLFUNC(SpawnEffect, "effectName, pos, dir, [scale], [entityId], [partId]");
Particle: SCRIPT_REG_TEMPLFUNC(SpawnEffectLine, "effectName, startPos, endPos, dir, scale, slices");
Particle: SCRIPT_REG_TEMPLFUNC(SpawnParticles, "params, pos, dir");
Particle: SCRIPT_REG_TEMPLFUNC(CreateDecal, "pos, normal, size, lifeTime, textureName, [angle], [hitDirection], [entityId], [partid]");
Particle: SCRIPT_REG_TEMPLFUNC(CreateMatDecal, "pos, normal, size, lifeTime, materialName, [angle], [hitDirection], [entityId], [partid]");
Particle: SCRIPT_REG_FUNC(Attach);
Particle: SCRIPT_REG_FUNC(Detach);
Physics: SCRIPT_REG_TEMPLFUNC(SimulateExplosion,"tableExplosion" );
Physics: SCRIPT_REG_TEMPLFUNC(RegisterExplosionShape,"sGeometryFile,fSize,nIdMaterial,fProbability,sSplintersFile,fSplintersOffset,sSplintersCloudEffect" );
Physics: SCRIPT_REG_TEMPLFUNC(RegisterExplosionCrack,"sGeometryFile,nIdMaterial" );
Physics: SCRIPT_REG_FUNC(RayWorldIntersection);
Physics: SCRIPT_REG_TEMPLFUNC(RayTraceCheck,"vSrc,vTrg,hSkipEntityId1,hSkipEntityId2");
Physics: SCRIPT_REG_TEMPLFUNC(SamplePhysEnvironment,"vPoint,fRadius");
Script: SCRIPT_REG_FUNC(ReloadScripts);
Script: SCRIPT_REG_FUNC(ReloadScript);
Script: SCRIPT_REG_TEMPLFUNC(ReloadEntityScript, "className");
Script: SCRIPT_REG_FUNC(LoadScript);
Script: SCRIPT_REG_FUNC(LoadScriptFolder); 
Script: SCRIPT_REG_FUNC(UnloadScript);
Script: SCRIPT_REG_FUNC(DumpLoadedScripts);
Script: SCRIPT_REG_TEMPLFUNC(SetTimer,"nMilliseconds,Function");
Script: SCRIPT_REG_TEMPLFUNC(SetTimerForFunction,"nMilliseconds,Function");
Script: SCRIPT_REG_TEMPLFUNC(KillTimer,"nTimerId");
Sound: SCRIPT_REG_TEMPLFUNC(GetAudioTriggerID, "sTriggerName");
Sound: SCRIPT_REG_TEMPLFUNC(GetAudioSwitchID, "sSwitchName");
Sound: SCRIPT_REG_TEMPLFUNC(GetAudioSwitchStateID, "hSwitchID, sStateName");
Sound: SCRIPT_REG_TEMPLFUNC(GetAudioRtpcID, "sRtpcName");
Sound: SCRIPT_REG_TEMPLFUNC(GetAudioEnvironmentID, "sEnvironmentName");
Sound: SCRIPT_REG_TEMPLFUNC(SetAudioRtpcValue, "hRtpcID, fValue");
System: SCRIPT_REG_FUNC(CreateDownload);
System: SCRIPT_REG_FUNC(LoadFont);
System: SCRIPT_REG_FUNC(ExecuteCommand);
System: SCRIPT_REG_FUNC(LogToConsole);
System: SCRIPT_REG_FUNC(LogAlways);
System: SCRIPT_REG_FUNC(ClearConsole);
System: SCRIPT_REG_FUNC(Log);
System: SCRIPT_REG_FUNC(Warning);
System: SCRIPT_REG_FUNC(Error);
System: SCRIPT_REG_TEMPLFUNC(IsEditor, "");
System: SCRIPT_REG_TEMPLFUNC(IsEditing, "");
System: SCRIPT_REG_FUNC(GetCurrTime);
System: SCRIPT_REG_FUNC(GetCurrAsyncTime);
System: SCRIPT_REG_FUNC(GetFrameTime);
System: SCRIPT_REG_FUNC(GetLocalOSTime);
System: SCRIPT_REG_FUNC(GetUserName);
System: SCRIPT_REG_FUNC(DrawLabel);
System: SCRIPT_REG_FUNC(GetEntity);
System: SCRIPT_REG_FUNC(GetEntityClass);
System: SCRIPT_REG_FUNC(PrepareEntityFromPool);
System: SCRIPT_REG_FUNC(ReturnEntityToPool);
System: SCRIPT_REG_FUNC(ResetPoolEntity);
System: SCRIPT_REG_FUNC(GetEntities);
System: SCRIPT_REG_TEMPLFUNC(GetEntitiesInSphere, "center, radius");
System: SCRIPT_REG_TEMPLFUNC(GetEntitiesInSphereByClass, "center, radius, className");
System: SCRIPT_REG_TEMPLFUNC(GetPhysicalEntitiesInBox, "center, radius");
System: SCRIPT_REG_TEMPLFUNC(GetPhysicalEntitiesInBoxByClass, "center, radius, className");
System: SCRIPT_REG_TEMPLFUNC(GetEntitiesByClass, "EntityClass");
System: SCRIPT_REG_TEMPLFUNC(GetNearestEntityByClass, "center, radius, className"); 
System: SCRIPT_REG_TEMPLFUNC(GetEntityByName,"sEntityName");
System: SCRIPT_REG_TEMPLFUNC(GetEntityIdByName,"sEntityName");
System: SCRIPT_REG_FUNC(DeformTerrain);
System: SCRIPT_REG_FUNC(DeformTerrainUsingMat);
System: SCRIPT_REG_FUNC(ScreenToTexture);
System: SCRIPT_REG_FUNC(DrawLine);
System: SCRIPT_REG_FUNC(Draw2DLine);
System: SCRIPT_REG_FUNC(DrawText);
System: SCRIPT_REG_FUNC(SetGammaDelta);
System: SCRIPT_REG_FUNC(ShowConsole);
System: SCRIPT_REG_FUNC(CheckHeapValid);
System: SCRIPT_REG_FUNC(GetConfigSpec);
System: SCRIPT_REG_FUNC(IsMultiplayer);
System: SCRIPT_REG_FUNC(SetPostProcessFxParam);
System: SCRIPT_REG_FUNC(GetPostProcessFxParam);
System: SCRIPT_REG_FUNC(SetScreenFx);
System: SCRIPT_REG_FUNC(GetScreenFx);
System: SCRIPT_REG_FUNC(SetCVar);
System: SCRIPT_REG_FUNC(GetCVar);
System: SCRIPT_REG_FUNC(AddCCommand);
System: SCRIPT_REG_FUNC(RemoveCCommand);
System: SCRIPT_REG_FUNC(AddKeyBind);
System: SCRIPT_REG_FUNC(SetScissor);
System: SCRIPT_REG_FUNC(GetSystemMem);
System: SCRIPT_REG_FUNC(IsPS20Supported);
System: SCRIPT_REG_FUNC(IsHDRSupported);
System: SCRIPT_REG_FUNC(SetBudget);
System: SCRIPT_REG_FUNC(SetVolumetricFogModifiers);
System: SCRIPT_REG_FUNC(SetWind);
System: SCRIPT_REG_FUNC(GetWind);
System: SCRIPT_REG_TEMPLFUNC(GetSurfaceTypeIdByName, "surfaceName");
System: SCRIPT_REG_TEMPLFUNC(GetSurfaceTypeNameById, "surfaceId");
System: SCRIPT_REG_TEMPLFUNC(RemoveEntity, "entityId");
System: SCRIPT_REG_TEMPLFUNC(SpawnEntity, "params");
System: SCRIPT_REG_FUNC(ActivateLight);
System: SCRIPT_REG_FUNC(SetWaterVolumeOffset);
System: SCRIPT_REG_FUNC(IsValidMapPos);
System: SCRIPT_REG_FUNC(EnableMainView);
System: SCRIPT_REG_FUNC(EnableOceanRendering);
System: SCRIPT_REG_FUNC(ScanDirectory);
System: SCRIPT_REG_FUNC(DebugStats);
System: SCRIPT_REG_FUNC(ViewDistanceSet);
System: SCRIPT_REG_FUNC(ViewDistanceGet);
System: SCRIPT_REG_FUNC(ApplyForceToEnvironment);
System: SCRIPT_REG_FUNC(GetOutdoorAmbientColor);
System: SCRIPT_REG_FUNC(SetOutdoorAmbientColor);
System: SCRIPT_REG_FUNC(GetTerrainElevation);
System: SCRIPT_REG_FUNC(ActivatePortal);
System: SCRIPT_REG_FUNC(DumpMMStats);
System: SCRIPT_REG_FUNC(EnumDisplayFormats);
System: SCRIPT_REG_FUNC(EnumAAFormats);
System: SCRIPT_REG_FUNC(IsPointIndoors);
System: SCRIPT_REG_FUNC(SetConsoleImage);
System: SCRIPT_REG_TEMPLFUNC(ProjectToScreen, "point");
System: SCRIPT_REG_FUNC(EnableHeatVision);
System: SCRIPT_REG_FUNC(ShowDebugger);
System: SCRIPT_REG_FUNC(DumpMemStats);
System: SCRIPT_REG_FUNC(DumpMemoryCoverage);
System: SCRIPT_REG_FUNC(ApplicationTest);
System: SCRIPT_REG_FUNC(QuitInNSeconds);
System: SCRIPT_REG_FUNC(DumpWinHeaps);
System: SCRIPT_REG_FUNC(Break);
System: SCRIPT_REG_TEMPLFUNC(SetViewCameraFov, "fov");
System: SCRIPT_REG_TEMPLFUNC(GetViewCameraFov, "");
System: SCRIPT_REG_TEMPLFUNC(IsPointVisible, "point");
System: SCRIPT_REG_FUNC(GetViewCameraPos);
System: SCRIPT_REG_FUNC(GetViewCameraDir);
System: SCRIPT_REG_FUNC(GetViewCameraUpDir);
System: SCRIPT_REG_FUNC(GetViewCameraAngles);
System: SCRIPT_REG_FUNC(RayWorldIntersection);
System: SCRIPT_REG_FUNC(BrowseURL);
System: SCRIPT_REG_FUNC(IsDevModeEnable);
System: SCRIPT_REG_FUNC(RayTraceCheck);
System: SCRIPT_REG_FUNC(SaveConfiguration);
System: SCRIPT_REG_FUNC(Quit);
System: SCRIPT_REG_FUNC(ClearKeyState);
System: SCRIPT_REG_TEMPLFUNC(SetSunColor,"vSunColor");
System: SCRIPT_REG_TEMPLFUNC(GetSunColor,"");
System: SCRIPT_REG_TEMPLFUNC(SetSkyColor,"vSkyColor");
System: SCRIPT_REG_TEMPLFUNC(GetSkyColor,"");
System: SCRIPT_REG_TEMPLFUNC(SetSkyHighlight,"tableSkyHighlightParams");
System: SCRIPT_REG_TEMPLFUNC(GetSkyHighlight,"");
System: SCRIPT_REG_TEMPLFUNC(LoadLocalizationXml,"filename");
System: SCRIPT_REG_FUNC(GetFrameID);
Kythera: SCRIPT_REG_FUNC(Generate);
Kythera: SCRIPT_REG_FUNC(RegisterEntity);
Kythera: SCRIPT_REG_FUNC(RegisterReferenceEntity);
Kythera: SCRIPT_REG_FUNC(RegisterGroupEntity);
Kythera: SCRIPT_REG_FUNC(UnregisterEntity);
Kythera: SCRIPT_REG_FUNC(AddGroundNavigation);
Kythera: SCRIPT_REG_FUNC(MakeGroundObstacle);
Kythera: SCRIPT_REG_FUNC(UnregisterAsObstacle);
Kythera: SCRIPT_REG_FUNC(Make3DObstacle);
Kythera: SCRIPT_REG_FUNC(AddTag);
